name: OpenWrt Package AutoCompiler

on:
  workflow_run:
    workflows: ["Auto Sync App"]
    types: [completed]
  push:
    branches: [main]
    paths-ignore: 
      - '.github/workflows/**'
      - 'README.md'
  workflow_dispatch:
    inputs:
      compile_pkg:
        description: 'Package(s) to compile (default: all)'
        required: false
      verbose:
        description: 'Verbosity level'
        type: choice
        options: [0, 1, 2]
        default: '0'
      without_pages:
        description: 'Skip pages deployment'
        type: boolean
        default: false

permissions:
  contents: read
  pages: write
  id-token: write

env:
  SDK_VERSION: ubuntu-22.04
  RUBY_VERSION: '3.1'

jobs:
  build:
    name: Build Packages
    runs-on: ${{ env.SDK_VERSION }}
    strategy:
      fail-fast: false
      matrix:
        release: [SNAPSHOT, 24.10.2, 23.05.5]
        arch: [
          x86_64, mips_24kc, mipsel_24kc, 
          arm_cortex-a7_neon-vfpv4, aarch64_cortex-a53,
          aarch64_cortex-a72, aarch64_generic
        ]
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup Build Environment
      run: |
        sudo apt-get update
        sudo apt-get install -yq \
          build-essential clang flex bison g++ gawk \
          git libncurses-dev libssl-dev python3 rsync unzip
        sudo apt-get clean

    - name: Get Package List
      id: packages
      run: |
        find feeds/ -mindepth 2 -maxdepth 2 -type f -name Makefile -exec dirname {} \; \
          | xargs -n1 basename \
          | sort -u \
          | tr '\n' ' ' > pkglist.txt
        echo "list=$(cat pkglist.txt)" >> $GITHUB_OUTPUT

    - name: Setup OpenWrt SDK
      uses: docker://openwrtorg/sdk:${{ matrix.release }}-${{ matrix.arch }}
      with:
        entrypoint: /bin/bash
        args: -c "cp -r /sdk $GITHUB_WORKSPACE/sdk"

    - name: Build Packages
      run: |
        cd sdk
        ./scripts/feeds update
        ./scripts/feeds install -a
        make defconfig
        echo "CONFIG_SIGNED_PACKAGES=n" >> .config
        make package/compile -j$(nproc)

    - name: Collect Artifacts
      run: |
        mkdir -p artifacts/${{ matrix.arch }}
        find sdk/bin -name '*.ipk' -or -name '*.apk' -exec cp {} artifacts/${{ matrix.arch }} \;

    - uses: actions/upload-artifact@v4
      with:
        name: packages-${{ matrix.release }}-${{ matrix.arch }}
        path: artifacts/${{ matrix.arch }}

  deploy:
    needs: build
    runs-on: ${{ env.SDK_VERSION }}
    steps:
    - name: Checkout Pages
      uses: actions/checkout@v4
      with:
        ref: 'gh-pages'

    - name: Download Artifacts
      uses: actions/download-artifact@v4

    - name: Organize Packages
      run: |
        for artifact in *; do
          [[ $artifact =~ packages-(.*)-(.*) ]] || continue
          mkdir -p releases/${BASH_REMATCH[1]}/${BASH_REMATCH[2]}
          cp -r $artifact/* releases/${BASH_REMATCH[1]}/${BASH_REMATCH[2]}
        done

    - name: Publish Packages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./releases

  pages:
    needs: deploy
    if: ${{ !inputs.without_pages }}
    runs-on: ${{ env.SDK_VERSION }}
    steps:
    - name: Setup Jekyll
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}

    - name: Build Site
      run: |
        gem install jekyll bundler
        jekyll build --destination ./dist

    - name: Deploy Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./dist