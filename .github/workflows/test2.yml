# Copyright (C) 2025 nosignals
#
name: 🛠️ AutoCompiler OpenWrt Packages

on:
  workflow_run:
    workflows: ["Auto Sync App"]
    types:
      - completed

  push:
    branches:
      - main
    paths-ignore:
      - '.github/workflows/**'
      - 'README.md'

  workflow_dispatch:
    inputs:
      compile_pkg:
        description: '📦 Compile packages (default: all packages on list_packages.txt)'
        required: false
        default: ''
        type: string

      verbose:
        description: '🔊 Verbose level (default: 0)'
        required: false
        default: '0'
        type: choice
        options:
          - '0'
          - '1'
          - '2'

      without_pages:
        description: '🚫 Dont deploy pages'
        required: true
        default: false
        type: boolean

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: auto-compiler-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_ipk:
    permissions:
      contents: write
    name: 🔨 Build Packages
    runs-on: ubuntu-22.04
    env:
      SDK_CACHE_DIR: ${{ github.workspace }}/sdk_cache
    strategy:
      fail-fast: false
      matrix:
        release: [SNAPSHOT, 24.10.2, 23.05.5]
        arch: [
          x86_64, mips_24kc, mipsel_24kc,
          arm_cortex-a7_neon-vfpv4, aarch64_cortex-a53,
          aarch64_cortex-a72, aarch64_generic
        ]

    steps:
      - name: '📥 Checkout Repository'
        uses: actions/checkout@v4
        with:
          ref: main

      - name: '📦 Cache APT packages'
        uses: actions/cache@v3
        with:
          path: |
            /var/cache/apt/archives/*.deb
            /var/cache/apt/*.bin
          key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/test2.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: '⚙️ Install Dependencies'
        run: |
          echo "::group::📥 Installing build dependencies"
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends \
            build-essential clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
            python3-setuptools rsync swig unzip zlib1g-dev file wget zstd python3-pyelftools
          sudo pip3 install --upgrade pip
          sudo pip3 install meson ninja

          sudo apt-get clean
          echo "::endgroup::"

      - name: '📂 Prepare SDK Cache'
        run: |
          echo "::group::📁 Creating SDK cache directory"
          mkdir -p $SDK_CACHE_DIR
          chmod 777 $SDK_CACHE_DIR
          echo "Cache location: $SDK_CACHE_DIR"
          echo "::endgroup::"

      - name: '🔍 Cache OpenWrt SDK'
        id: cache-sdk
        uses: actions/cache@v3
        with:
          path: ${{ env.SDK_CACHE_DIR }}
          key: sdk-${{ matrix.release }}-${{ matrix.arch }}
          restore-keys: |
            sdk-${{ matrix.release }}-

      - name: '⬇️ Download and Setup SDK'
        if: steps.cache-sdk.outputs.cache-hit != 'true'
        run: |
          echo "::group::🌐 Downloading SDK for ${{ matrix.release }}/${{ matrix.arch }}"
          RELEASE="${{ matrix.release }}"
          ARCH="${{ matrix.arch }}"

          if [[ "$RELEASE" == "SNAPSHOT" ]]; then
            URL_PATH="snapshots/targets"
            GCC_VERSION="14.3.0"
            FILE_EXT="tar.zst"
            echo "ℹ️ Using SNAPSHOT build - APK format"
          elif [[ "$RELEASE" == "24.10.2" ]]; then
            URL_PATH="releases/24.10.2/targets"
            GCC_VERSION="13.3.0"
            FILE_EXT="tar.zst"
            echo "ℹ️ Using stable release - IPK format"
          elif [[ "$RELEASE" == "23.05.5" ]]; then
            URL_PATH="releases/23.05.5/targets"
            GCC_VERSION="12.3.0"
            FILE_EXT="tar.xz"
            echo "ℹ️ Using stable release - IPK format"
          fi

          case "$ARCH" in
            "x86_64")
              TARGET="x86/64"
              if [[ "$RELEASE" == "SNAPSHOT" ]]; then
                SDK_NAME="openwrt-sdk-x86-64_gcc-${GCC_VERSION}_musl.Linux-x86_64"
              else
                SDK_NAME="openwrt-sdk-${RELEASE}-x86-64_gcc-${GCC_VERSION}_musl.Linux-x86_64"
              fi
              ;;
            "mips_24kc")
              TARGET="ath79/generic"
              if [[ "$RELEASE" == "SNAPSHOT" ]]; then
                SDK_NAME="openwrt-sdk-ath79-generic_gcc-${GCC_VERSION}_musl.Linux-x86_64"
              else
                SDK_NAME="openwrt-sdk-${RELEASE}-ath79-generic_gcc-${GCC_VERSION}_musl.Linux-x86_64"
              fi
              ;;
            "mipsel_24kc")
              TARGET="ramips/mt7621"
              if [[ "$RELEASE" == "SNAPSHOT" ]]; then
                SDK_NAME="openwrt-sdk-ramips-mt7621_gcc-${GCC_VERSION}_musl.Linux-x86_64"
              else
                SDK_NAME="openwrt-sdk-${RELEASE}-ramips-mt7621_gcc-${GCC_VERSION}_musl.Linux-x86_64"
              fi
              ;;
            "arm_cortex-a7_neon-vfpv4")
              TARGET="bcm27xx/bcm2709"
              if [[ "$RELEASE" == "SNAPSHOT" ]]; then
                SDK_NAME="openwrt-sdk-bcm27xx-bcm2709_gcc-${GCC_VERSION}_musl_eabi.Linux-x86_64"
              else
                SDK_NAME="openwrt-sdk-${RELEASE}-bcm27xx-bcm2709_gcc-${GCC_VERSION}_musl_eabi.Linux-x86_64"
              fi
              ;;
            "aarch64_cortex-a53")
              TARGET="bcm27xx/bcm2710"
              if [[ "$RELEASE" == "SNAPSHOT" ]]; then
                SDK_NAME="openwrt-sdk-bcm27xx-bcm2710_gcc-${GCC_VERSION}_musl.Linux-x86_64"
              else
                SDK_NAME="openwrt-sdk-${RELEASE}-bcm27xx-bcm2710_gcc-${GCC_VERSION}_musl.Linux-x86_64"
              fi
              ;;
            "aarch64_cortex-a72")
              TARGET="bcm27xx/bcm2711"
              if [[ "$RELEASE" == "SNAPSHOT" ]]; then
                SDK_NAME="openwrt-sdk-bcm27xx-bcm2711_gcc-${GCC_VERSION}_musl.Linux-x86_64"
              else
                SDK_NAME="openwrt-sdk-${RELEASE}-bcm27xx-bcm2711_gcc-${GCC_VERSION}_musl.Linux-x86_64"
              fi
              ;;
            "aarch64_generic")
              TARGET="rockchip/armv8"
              if [[ "$RELEASE" == "SNAPSHOT" ]]; then
                SDK_NAME="openwrt-sdk-rockchip-armv8_gcc-${GCC_VERSION}_musl.Linux-x86_64"
              else
                SDK_NAME="openwrt-sdk-${RELEASE}-rockchip-armv8_gcc-${GCC_VERSION}_musl.Linux-x86_64"
              fi
              ;;
          esac

          SDK_URL="https://downloads.openwrt.org/${URL_PATH}/${TARGET}/${SDK_NAME}.${FILE_EXT}"

          echo "🔗 Download URL: $SDK_URL"
          wget -q "$SDK_URL" -O "$SDK_CACHE_DIR/sdk.${FILE_EXT}"

          echo "📦 Extracting SDK..."
          mkdir -p "$SDK_CACHE_DIR"
          if [[ "$FILE_EXT" == "tar.zst" ]]; then
            if command -v tar &> /dev/null && tar --use-compress-program=zstd -tf "$SDK_CACHE_DIR/sdk.tar.zst" >/dev/null 2>&1; then
              tar --use-compress-program=zstd -xf "$SDK_CACHE_DIR/sdk.tar.zst" -C "$SDK_CACHE_DIR"
            else
              zstd -d "$SDK_CACHE_DIR/sdk.${FILE_EXT}" -o "$SDK_CACHE_DIR/sdk.tar"
              tar -xf "$SDK_CACHE_DIR/sdk.tar" -C "$SDK_CACHE_DIR"
            fi
          else
            tar -xf "$SDK_CACHE_DIR/sdk.${FILE_EXT}" -C "$SDK_CACHE_DIR"
          fi

          mv "$SDK_CACHE_DIR/$SDK_NAME" "$SDK_CACHE_DIR/openwrt-sdk"
          echo "✅ SDK setup complete"
          echo "::endgroup::"

      - name: '📍 Set SDK Path'
        run: |
          echo "::group::🛠️ Setting SDK environment"
          echo "SDK_PATH=${{ env.SDK_CACHE_DIR }}/openwrt-sdk" >> $GITHUB_ENV
          echo "Using SDK at: ${{ env.SDK_CACHE_DIR }}/openwrt-sdk"
          echo "::endgroup::"

      - name: '📋 Read Package List'
        if: ${{ inputs.compile_pkg == '' }}
        id: list_package
        run: |
          echo "::group::📦 Discovering packages"
          _packages=""
          _luci=""
          
          if [ -d "$GITHUB_WORKSPACE/feeds/packages" ]; then
            echo "🔍 Scanning packages feed..."
            _packages="$(find "$GITHUB_WORKSPACE/feeds/packages" -mindepth 1 -maxdepth 2 -type d -exec test -f {}/Makefile \; -print | xargs -n1 basename | tr '\n' ' ' | sed 's/ $//')"
          fi
          
          if [ -d "$GITHUB_WORKSPACE/feeds/luci" ]; then
            echo "🎨 Scanning LuCI feed..."
            _luci="$(find "$GITHUB_WORKSPACE/feeds/luci" -mindepth 1 -maxdepth 2 -type d -exec test -f {}/Makefile \; -print | xargs -n1 basename | tr '\n' ' ' | sed 's/ $//')"
          fi
          
          combined_packages="$_packages $_luci"
          combined_packages=$(echo "$combined_packages" | tr ' ' '\n' | sort -u | tr '\n' ' ' | sed 's/ $//')
          
          echo "📋 Found packages:"
          echo "$combined_packages" | tr ' ' '\n' | column
          echo "::endgroup::"
          echo "content=$combined_packages" >> $GITHUB_OUTPUT

      - name: '📜 List Packages to Build'
        run: |
          echo "::group::📦 Packages scheduled for build"
          packages_list="${{ steps.list_package.outputs.content }} ${{ inputs.compile_pkg }}"
          clean_list=$(echo "$packages_list" | tr ' ' '\n' | sort -u | tr '\n' ' ')
          echo "$clean_list" | tr ' ' '\n' | column
          echo "::endgroup::"

      - name: '📁 Create Artifacts Directory'
        run: |
          echo "::group::📂 Preparing artifacts folder"
          mkdir -p artifacts
          echo "Artifacts directory ready: $GITHUB_WORKSPACE/artifacts"
          echo "::endgroup::"

      - name: '⚙️ Setup SDK Feeds'
        run: |
          echo "::group::📡 Configuring feeds"
          cd $SDK_PATH
          if [ -z "$NO_DEFAULT_FEEDS" ]; then
            sed \
              -e 's,https://git.openwrt.org/feed/,https://github.com/openwrt/,' \
              -e 's,https://git.openwrt.org/openwrt/,https://github.com/openwrt/,' \
              -e 's,https://git.openwrt.org/project/,https://github.com/openwrt/,' \
              feeds.conf.default > feeds.conf
          fi
          FEEDNAME="custom"
          echo "src-link $FEEDNAME $GITHUB_WORKSPACE/feeds/" >> feeds.conf
          
          echo "📋 Final feed configuration:"
          cat feeds.conf
          
          echo "🔄 Updating feeds..."
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          echo "✅ Feeds configured"
          echo "::endgroup::"

      - name: '📂 Copy Package Sources'
        run: |
          echo "::group::📤 Copying custom packages"
          cd $SDK_PATH
          if [ -d "$GITHUB_WORKSPACE/package" ]; then
            echo "📦 Copying root package directory..."
            cp -rv "$GITHUB_WORKSPACE/package/"* "./package/" 2>/dev/null || true
            echo "📂 Custom packages copied to SDK"
            ls -l "./package/"
          fi
          echo "::endgroup::"

      - name: '⚙️ Generate Default Config'
        run: |
          echo "::group::⚙️ Running make defconfig"
          cd $SDK_PATH
          make defconfig
          echo "✅ Default config generated"
          echo "::endgroup::"

      - name: '🔓 Disable Package Signing'
        run: |
          echo "::group::🔏 Disabling package signing"
          cd $SDK_PATH
          echo "CONFIG_SIGNED_PACKAGES=n" >> .config
          make defconfig
          echo "✅ Package signing disabled"
          echo "::endgroup::"

      - name: '🏗️ Build Packages'
        run: |
          echo "::group::🔨 Starting build process"
          cd $SDK_PATH
          
          # Verbosity setup
          case "${{ inputs.verbose }}" in
            "1") V="V=s" ;;
            "2") V="V=sc" ;;
            *) V="" ;;
          esac
          echo "🔊 Verbosity level: ${{ inputs.verbose }} ($V)"
          
          # Package selection
          PACKAGES="${{ steps.list_package.outputs.content }} ${{ inputs.compile_pkg }}"
          PACKAGES=$(echo "$PACKAGES" | tr ' ' '\n' | sort -u | tr '\n' ' ')
          
          # Environment setup
          export BUILD_LOG=1
          export CONFIG_ALL_NONSHARED=n
          export CONFIG_ALL_KMODS=n
          export CONFIG_ALL=n
          export CONFIG_AUTOREMOVE=n
          export CONFIG_SIGNED_PACKAGES=n
          export FEEDNAME="custom"
          
          RET=0
          BUILD_SUCCESS=()
          BUILD_FAILED=()
          
          echo "📋 Packages to build:"
          echo "$PACKAGES" | tr ' ' '\n' | column
          
          if [ -n "$PACKAGES" ]; then
            for PKG in $PACKAGES; do
              echo "::group::📦 Building $PKG"
              ./scripts/feeds install -p "$FEEDNAME" -f "$PKG" || true
              if make -f .config -f tmp/.packagedeps -f <(echo "\$(info \$(sort \$(package-y) \$(package-m)))"; echo -en "a:\n\t@:") 2>/dev/null | tr ' ' '\n' | grep -qE "(^|/)$PKG$"; then
                echo "🔧 Building $PKG..."
                make package/"$PKG"/compile $V -j"$(nproc)" || {
                  echo "❌ Failed to build package: $PKG"
                  BUILD_FAILED+=("$PKG")
                  RET=1
                  echo "::endgroup::"
                  continue
                }
                echo "🔍 Checking for built package files..."
                find bin/packages/ -name "*$PKG*" -type f 2>/dev/null || echo "⚠️ No package files found for $PKG"
                BUILD_SUCCESS+=("$PKG")
              else
                echo "⚠️ Skipping $PKG (unsupported architecture or not found)"
              fi
              echo "::endgroup::"
            done
          else
            echo "📦 Building all custom packages"
            ./scripts/feeds install -p "$FEEDNAME" -f -a
            make package/compile $V -j"$(nproc)" || RET=$?
          fi
          
          echo "📊 Build summary:"
          echo "✅ Success: ${#BUILD_SUCCESS[@]} packages"
          [ "${#BUILD_SUCCESS[@]}" -gt 0 ] && echo "  - ${BUILD_SUCCESS[*]}"
          echo "❌ Failed: ${#BUILD_FAILED[@]} packages"
          [ "${#BUILD_FAILED[@]}" -gt 0 ] && echo "  - ${BUILD_FAILED[*]}"
          
          if [ "$RET" -eq 0 ]; then
            echo "📦 Creating package index"
            if [ "${{ matrix.release }}" = "SNAPSHOT" ]; then
              make package/index -j1 V=s CONFIG_SIGNED_PACKAGES=n || echo "⚠️ APK index creation failed"
            else
              make package/index -j1 V=s CONFIG_SIGNED_PACKAGES=n || echo "⚠️ IPK index creation failed"
            fi
          fi
          
          exit $RET
          echo "::endgroup::"

      - name: '📤 Copy Built Packages'
        if: success() || failure()
        run: |
          echo "::group::📦 Collecting artifacts"
          cd $SDK_PATH
          
          mkdir -p "$GITHUB_WORKSPACE/artifacts/bin/packages/${{ matrix.arch }}"
          mkdir -p "$GITHUB_WORKSPACE/artifacts/logs"
          
          echo "🔍 Searching for packages..."
          if [ -d "./bin/packages/${{ matrix.arch }}/custom" ]; then
            echo "📦 Found custom packages directory"
            cp -rv "./bin/packages/${{ matrix.arch }}/custom/"* "$GITHUB_WORKSPACE/artifacts/bin/packages/${{ matrix.arch }}/" 2>/dev/null || true
          else
            echo "⚠️ No custom packages directory found"
          fi
          
          if [ -d "./logs/package/feeds/custom" ]; then
            cp -rv "./logs/package/feeds/custom/"* "$GITHUB_WORKSPACE/artifacts/logs/" 2>/dev/null || true
          fi
          
          if [ -d "./logs" ]; then
            find ./logs -name "*.log" -exec cp -v {} "$GITHUB_WORKSPACE/artifacts/logs/" \; 2>/dev/null || true
          fi
          
          echo "📋 Artifacts collected:"
          find "$GITHUB_WORKSPACE/artifacts" -type f | head -10
          du -sh "$GITHUB_WORKSPACE/artifacts"
          echo "::endgroup::"

      - name: '📦 Upload Packages'
        uses: actions/upload-artifact@v4
        with:
          name: "openwrt_${{ matrix.release }}_${{ matrix.arch }}"
          path: ${{ github.workspace }}/artifacts/bin/packages/${{ matrix.arch }}/*
          retention-days: 30

      - name: '📝 Upload Build Logs'
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: "build_logs_${{ matrix.release }}_${{ matrix.arch }}"
          path: ${{ github.workspace }}/artifacts/logs/*
          retention-days: 7

  push_packages:
    needs: build_ipk
    if: success() || failure()
    name: '🚀 Push Packages'
    permissions:
      contents: write
    runs-on: ubuntu-22.04
    steps:
      - name: '📥 Checkout gh-pages'
        uses: actions/checkout@v4
        with:
          ref: 'gh-pages'
          lfs: false
          submodules: false

      - name: '📥 Download Artifacts'
        uses: actions/download-artifact@v4

      - name: '🧹 Clean Logs'
        run: |
          echo "::group::🧹 Removing log artifacts"
          rm -rf build_logs_*
          echo "✅ Logs cleaned"
          echo "::endgroup::"

      - name: '🚚 Deploy Packages'
        run: |
          echo "::group::🚀 Deploying packages"
          mkdir -p releases
          versions=("SNAPSHOT" "24.10.2" "23.05.5")
          archs=("x86_64" "mips_24kc" "mipsel_24kc" "arm_cortex-a7_neon-vfpv4" "aarch64_cortex-a53" "aarch64_cortex-a72" "aarch64_generic")

          for vr in "${versions[@]}"; do
            if [[ "$vr" == "SNAPSHOT" ]]; then
              vers="snapshot"
            else
              vers="${vr%.*}"
            fi

            for arc in "${archs[@]}"; do
              artifact_dir="openwrt_${vr}_${arc}"
              if [ -d "$artifact_dir" ]; then
                echo "📦 Processing $artifact_dir → releases/$vers/packages/$arc"
                rm -rf "releases/$vers/packages/$arc"
                mkdir -p "releases/$vers/packages/$arc"
                cp -rf "$artifact_dir"/* "releases/$vers/packages/$arc/"
                rm -rf "releases/$vers/packages/$arc/routing" "releases/$vers/packages/$arc/telephony"
              else
                echo "⚠️ Artifact $artifact_dir not found"
              fi
            done
          done

          echo "🗂️ Final package structure:"
          find releases -type f | head -20
          echo "::endgroup::"

      - name: '📝 Commit Changes'
        env:
          Branch: gh-pages
        run: |
          echo "::group::💾 Committing package updates"
          git config --local user.name "GitHub Action"
          git config --local user.email "actions-user@users.noreply.github.com"
          git add .
          
          if git diff --staged --quiet; then
            echo "✅ No changes to commit"
          else
            git commit -m "📦 Update Packages - $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            git push
            echo "🚀 Packages deployed to gh-pages"
          fi
          echo "::endgroup::"

  build_pages:
    needs: push_packages
    if: inputs.without_pages == false && !cancelled()
    name: '🌐 Build Pages'
    permissions:
      contents: write
    runs-on: ubuntu-22.04
    steps:
      - name: '📥 Checkout gh-pages'
        uses: actions/checkout@v4
        with:
          ref: 'gh-pages'
          lfs: true
          submodules: true

      - name: '💎 Setup Ruby'
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true
          cache-version: 0

      - name: '⚙️ Run prenodes'
        env:
          SERVER_HOME: releases
        run: |
          echo "::group::⚙️ Executing prenodes script"
          if [ -f "./prenodes.sh" ]; then
            chmod +x ./prenodes.sh
            ./prenodes.sh
            echo "✅ prenodes.sh executed"
          else
            echo "⚠️ prenodes.sh not found, skipping"
          fi
          echo "::endgroup::"

      - name: '⚙️ Setup Pages'
        id: pages
        uses: actions/configure-pages@v5

      - name: '🔧 Build Jekyll Site'
        run: |
          echo "::group::🔨 Building documentation site"
          bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
          echo "✅ Site built successfully"
          echo "::endgroup::"
        env:
          JEKYLL_ENV: production

      - name: '📤 Upload Site Artifact'
        uses: actions/upload-pages-artifact@v3

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-22.04
    needs: build_pages
    if: inputs.without_pages == false && !cancelled()
    steps:
      - name: '🚀 Deploy to GitHub Pages'
        id: deployment
        uses: actions/deploy-pages@v4

  clear_artifact:
    needs: push_packages
    if: always()
    name: '🧹 Cleanup'
    permissions:
      actions: write
      contents: read
    runs-on: ubuntu-22.04
    steps:
      - name: '🧽 Delete old workflow runs'
        uses: Mattraks/delete-workflow-runs@v2
        with:
          retain_days: 5
          keep_minimum_runs: 2