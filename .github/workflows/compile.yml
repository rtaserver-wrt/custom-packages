name: üì¶ Compile OpenWRT Packages

on:
  workflow_call:
    inputs:
      compiles:
        description: 'Specific packages to compile (space-separated)'
        required: false
        type: string
      ghpages_path:
        description: 'GitHub Pages deployment path'
        required: true
        type: string
      openwrt_version:
        description: 'OpenWRT version to build for'
        required: true
        type: string
      board:
        description: 'Target board'
        required: false
        type: string
      subtarget:
        description: 'Target subtarget'
        required: false
        type: string
      model:
        description: 'Target model'
        required: false
        type: string
      arch:
        description: 'Target architecture'
        required: true
        type: string
      apk_sign_id:
        description: 'APK signing key ID'
        required: true
        type: string
      gpg_id:
        description: 'GPG key ID for signing'
        required: false
        type: string

env:
  # Build configuration
  GPG_SIGN: true
  CACHE_DOWNLOAD: true
  DELETE_USELESS_FILES: true
  ARTIFACT_RETENTION_DAYS: 7
  
  # Constants
  MIRROR_URL: 'https://downloads.openwrt.org'
  PACKAGE_PREFIX: 'fantasticpackages_'

jobs:
  compile:
    name: üî® Build ${{ inputs.arch }} packages
    runs-on: ubuntu-22.04
    timeout-minutes: 480
    
    permissions:
      contents: write
      actions: read
    
    env:
      OP_VERSION: ${{ inputs.openwrt_version }}
      APK_SIGN_ID: ${{ inputs.apk_sign_id }}
      APK_SIGN_KEY: ${{ secrets[format('APK_SIGN_{0}', inputs.apk_sign_id)] }}
      APK_SIGN_PUBKEY: ${{ vars[format('APK_SIGN_PUB_{0}', inputs.apk_sign_id)] }}
      APK_SIGN_VERIFY_KEY_ID: ${{ vars.APK_SIGN_VERIFY_KEY_ID }}
      GPG_ID: ${{ inputs.gpg_id }}
      GPG_PW: ${{ secrets[format('GPG_PW_{0}', inputs.gpg_id)] }}
      GPG_KEY: ${{ secrets[format('GPG_{0}', inputs.gpg_id)] }}
      GPG_PUBKEY: ${{ vars[format('GPG_PUB_{0}', inputs.gpg_id)] }}
      GPG_FINGER: ${{ vars[format('GPG_FING_{0}', inputs.gpg_id)] }}

    steps:
      # =====================================
      # üîç System Information & Setup
      # =====================================
      - name: üìä Get system information
        uses: kenchan0130/actions-system-info@v1
        id: system-info

      - name: üñ•Ô∏è Display system specifications
        run: |
          echo "::group::System Information"
          cat << EOF
          üñ•Ô∏è  CPU: ${{ steps.system-info.outputs.cpu-model }} (${{ steps.system-info.outputs.cpu-core }} cores)
          üè†  Host: ${{ steps.system-info.outputs.hostname }}
          üêß  OS: ${{ steps.system-info.outputs.name }} ${{ steps.system-info.outputs.release }}
          üîß  Kernel: ${{ steps.system-info.outputs.kernel-release }}
          üíæ  Memory: ${{ steps.system-info.outputs.totalmem }} bytes (~${{ steps.system-info.outputs.totalmem | tonumber / 1073741824 | round(1) }} GB)
          üì¶  Platform: ${{ steps.system-info.outputs.platform }}
          EOF
          echo "::endgroup::"

      - name: üßπ Maximize build space
        if: env.DELETE_USELESS_FILES == 'true'
        uses: easimon/maximize-build-space@v0.3.0
        with:
          root-reserve-mb: 20480
          swap-size-mb: 8192
          remove-dotnet: true
          remove-android: true
          remove-haskell: true
          remove-codeql: true
          remove-docker-images: true

      # =====================================
      # üéØ Version & Branch Detection
      # =====================================
      - name: üéØ Determine build configuration
        id: config
        run: |
          echo "::group::Version Analysis"
          
          # Detect snapshot builds
          if echo "$OP_VERSION" | grep -q "SNAPSHOT"; then
            if [ "$OP_VERSION" = "SNAPSHOT" ]; then
              SNAPSHOTS="y"
              SNAPSHOTS_BRANCH="master"
            else
              SNAPSHOTS="i" # intermediate snapshot
              SNAPSHOTS_BRANCH="$(echo "$OP_VERSION" | sed -En 's|^(.+)-SNAPSHOT$|\1|p')"
            fi
          else
            SNAPSHOTS=""
            SNAPSHOTS_BRANCH=""
          fi
          
          # Determine branch
          if [ -n "$SNAPSHOTS_BRANCH" ]; then
            BRANCH="$SNAPSHOTS_BRANCH"
          else
            BRANCH="${OP_VERSION%.*}"
          fi
          
          # Build target URL prefix
          if [ -n "$SNAPSHOTS" ]; then
            URL_PREFIX="$MIRROR_URL/snapshots/targets/${{ inputs.board }}/${{ inputs.subtarget }}"
          else
            URL_PREFIX="$MIRROR_URL/releases/$OP_VERSION/targets/${{ inputs.board }}/${{ inputs.subtarget }}"
          fi
          
          echo "üìã Build Configuration:"
          echo "   Version: $OP_VERSION"
          echo "   Branch: $BRANCH"
          echo "   Snapshots: ${SNAPSHOTS:-no}"
          echo "   URL Prefix: $URL_PREFIX"
          
          # Export variables
          {
            echo "SNAPSHOTS=$SNAPSHOTS"
            echo "SNAPSHOTS_BRANCH=$SNAPSHOTS_BRANCH"
            echo "BRANCH=$BRANCH"
            echo "TARGET_URL_PREFIX=$URL_PREFIX"
          } >> $GITHUB_ENV
          
          echo "::endgroup::"

      - name: üåø Check branch availability
        id: branch-check
        run: |
          echo "::group::Branch Check"
          
          rcode=$(curl -sL -w '%{http_code}' -o /dev/null "https://github.com/$GITHUB_REPOSITORY/tree/$BRANCH")
          
          if [ "$rcode" != "404" ]; then
            echo "‚úÖ Branch '$BRANCH' exists and will be used"
            BUILD_BRANCH="$BRANCH"
          else
            echo "‚ö†Ô∏è  Branch '$BRANCH' not found, using '$GITHUB_REF_NAME'"
            BUILD_BRANCH="$GITHUB_REF_NAME"
          fi
          
          echo "BUILD_BRANCH=$BUILD_BRANCH" >> $GITHUB_ENV
          echo "build_branch=$BUILD_BRANCH" >> $GITHUB_OUTPUT
          
          echo "::endgroup::"

      # =====================================
      # üì• Source Code & Dependencies
      # =====================================
      - name: üì• Checkout source code
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BUILD_BRANCH }}
          lfs: true
          submodules: recursive
          fetch-depth: 1

      - name: üèóÔ∏è Initialize build environment
        run: |
          echo "::group::Environment Setup"
          
          # Create working directories
          sudo mkdir -p /workdir/{bin,DL}
          sudo mkdir -p "/workdir/FEEDS/$BRANCH"
          sudo chown -R $USER:$GROUPS /workdir
          
          echo "üìÅ Created working directories:"
          echo "   /workdir/bin - Build output"
          echo "   /workdir/DL - Downloads cache"
          echo "   /workdir/FEEDS/$BRANCH - Feeds cache"
          
          echo "::endgroup::"

      # =====================================
      # üíæ Caching Strategy
      # =====================================
      - name: üíæ Cache feeds
        if: env.CACHE_DOWNLOAD == 'true'
        uses: actions/cache@v4
        with:
          path: /workdir/FEEDS/${{ env.BRANCH }}
          key: feeds-${{ env.BRANCH }}-${{ hashFiles('**/Makefile', 'feeds.conf*') }}
          restore-keys: |
            feeds-${{ env.BRANCH }}-
            feeds-

      - name: üßπ Clean cached package feeds
        if: env.CACHE_DOWNLOAD == 'true'
        run: |
          echo "üßπ Removing old ${PACKAGE_PREFIX}* feeds from cache..."
          sudo rm -rf "/workdir/FEEDS/$BRANCH/${PACKAGE_PREFIX}"* 2>/dev/null || true

      - name: üíæ Cache downloads
        if: env.CACHE_DOWNLOAD == 'true'
        uses: actions/cache@v4
        with:
          path: /workdir/DL
          key: downloads-${{ env.BRANCH }}-${{ hashFiles('**/Makefile') }}
          restore-keys: |
            downloads-${{ env.BRANCH }}-
            downloads-

      - name: üëª Download ghost-dl cache
        if: env.CACHE_DOWNLOAD == 'true'
        continue-on-error: true
        run: |
          echo "::group::Ghost DL Cache"
          
          echo "üì• Downloading ghost-dl cache for branch: $BRANCH"
          
          if wget -q "https://codeload.github.com/fantastic-packages/ghost-dl/zip/refs/heads/$BRANCH" -O ghost-dl.zip; then
            unzip -q ghost-dl.zip
            cp -rf ghost-dl-*/* /workdir/DL/
            rm -rf ghost-dl.zip ghost-dl-*
            echo "‚úÖ Ghost-dl cache downloaded successfully"
          else
            echo "‚ö†Ô∏è  Ghost-dl cache download failed (non-critical)"
          fi
          
          echo "::endgroup::"

      - name: üìä Display cache structure
        if: env.CACHE_DOWNLOAD == 'true'
        run: |
          echo "::group::Cache Structure"
          
          echo "üìÅ Feeds cache structure:"
          find /workdir/FEEDS -maxdepth 2 -type d 2>/dev/null | head -20
          
          echo ""
          echo "üìÅ Downloads cache structure:"
          find /workdir/DL -maxdepth 3 -type d 2>/dev/null | head -20
          
          echo "::endgroup::"

      # =====================================
      # üîê Security & Signing Setup
      # =====================================
      - name: üîê Import signing keys
        if: env.GPG_SIGN == 'true' && env.GPG_KEY != ''
        run: |
          echo "::group::Key Import"
          
          echo "üîê Importing GPG key for signing..."
          
          # Import GPG private key
          echo "${GPG_KEY}" | gpg --batch --pinentry-mode=loopback --yes --passphrase "${GPG_PW}" --import
          
          # Set trust level
          echo "${GPG_FINGER//[[:space:]]/}:6:" | gpg --import-ownertrust
          
          echo "‚úÖ GPG key imported successfully"
          
          echo "::endgroup::"

      # =====================================
      # üì¶ Package Configuration
      # =====================================
      - name: üì¶ Configure feeds and packages
        id: packages
        run: |
          echo "::group::Package Configuration"
          
          # Configure extra feeds
          EXTRA_FEEDS="src-link|${PACKAGE_PREFIX}packages|/feed/feeds/packages/ src-link|${PACKAGE_PREFIX}luci|/feed/feeds/luci/"
          echo "üîó Extra feeds: $EXTRA_FEEDS"
          
          # Determine packages to build
          if [ -n "${{ inputs.compiles }}" ]; then
            echo "üéØ Building specific packages: ${{ inputs.compiles }}"
            PACKAGES="${{ inputs.compiles }}"
          else
            # Build all available packages
            packages_list=""
            luci_list=""
            
            if [ -d "$GITHUB_WORKSPACE/feeds/packages" ]; then
              packages_list="$(ls -1 "$GITHUB_WORKSPACE/feeds/packages/" 2>/dev/null | tr '\n' ' ')"
            fi
            
            if [ -d "$GITHUB_WORKSPACE/feeds/luci" ]; then
              luci_list="$(ls -1 "$GITHUB_WORKSPACE/feeds/luci/" 2>/dev/null | tr '\n' ' ')"
            fi
            
            PACKAGES="$packages_list $luci_list"
            echo "üì¶ Building all packages: $PACKAGES"
          fi
          
          # Export variables
          {
            echo "EXTRA_FEEDS=$EXTRA_FEEDS"
            echo "PACKAGES=$PACKAGES"
          } >> $GITHUB_ENV
          
          echo "packages=$PACKAGES" >> $GITHUB_OUTPUT
          
          echo "::endgroup::"

      # =====================================
      # üè™ Release Management
      # =====================================
      - name: üè™ Setup release repository
        id: releases
        run: |
          echo "::group::Release Setup"
          
          # Install dependencies
          sudo apt-get update -qq
          sudo apt-get install -y axel
          
          # Download existing releases
          release_url="https://codeload.github.com/$GITHUB_REPOSITORY_OWNER/custom-packages/tar.gz/refs/heads/gh-pages"
          
          echo "üì• Downloading existing releases..."
          if axel -q -n8 -o releases.tgz "$release_url"; then
            if tar -xzf releases.tgz "releases-gh-pages/$BRANCH/packages/${{ inputs.arch }}/" 2>/dev/null; then
              mv releases-gh-pages "${{ inputs.ghpages_path }}"
              echo "‚úÖ Existing releases downloaded"
            else
              echo "‚ö†Ô∏è  No existing packages found for this architecture"
            fi
          else
            echo "‚ö†Ô∏è  Failed to download releases (will start fresh)"
          fi
          
          # Move existing packages to working directory
          mkdir -p "/workdir/bin/packages/${{ inputs.arch }}"
          
          if [ -d "${{ inputs.ghpages_path }}/$BRANCH/packages/${{ inputs.arch }}" ]; then
            pushd "${{ inputs.ghpages_path }}/$BRANCH/packages/${{ inputs.arch }}"
            
            for feed_dir in */; do
              if [ -d "$feed_dir" ]; then
                target_dir="/workdir/bin/packages/${{ inputs.arch }}/${PACKAGE_PREFIX}${feed_dir%/}"
                echo "üì¶ Moving $feed_dir to $target_dir"
                mv "$feed_dir" "$target_dir"
              fi
            done
            
            popd
          fi
          
          echo "::endgroup::"

      # =====================================
      # üî® Build Process
      # =====================================
      - name: üî® Build packages
        id: build
        uses: fantastic-packages/gh-action-sdk@master
        env:
          ARCH: ${{ inputs.arch }}-${{ env.SNAPSHOTS != 'y' && format('{0}-', env.BRANCH) || '' }}SNAPSHOT
          ARTIFACTS_DIR: /workdir
          FEEDS_DIR: /workdir/FEEDS/${{ env.BRANCH }}
          DL_DIR: /workdir/DL
          FEED_DIR: ${{ github.workspace }}
          EXTRA_FEEDS: ${{ env.EXTRA_FEEDS }}
          NO_REPO_FEEDS: 1
          NO_SHFMT_CHECK: 1
          PACKAGES: ${{ env.PACKAGES }}
          INDEX: 1
          PRIVATE_KEY: ${{ env.APK_SIGN_KEY }}

      # =====================================
      # üö® Error Handling
      # =====================================
      - name: üö® Upload build logs on failure
        if: failure() && steps.build.conclusion == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ env.OP_VERSION }}-${{ inputs.arch }}-${{ github.run_number }}
          path: /workdir/logs
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

      # =====================================
      # üìù Package Processing & Signing
      # =====================================
      - name: üìù Process and sign packages
        id: process
        if: success()
        run: |
          echo "::group::Package Processing"
          
          # Function to sign packages
          sign_packages() {
            if [ "$GPG_SIGN" = "true" ] && [ -f "packages.adb" ] && [ -n "$GPG_ID" ]; then
              echo "üîê Signing packages.adb with GPG..."
              gpg -u "${GPG_ID}" --batch --pinentry-mode=loopback --yes \
                  --passphrase "${GPG_PW}" -a -o packages.adb.asc \
                  --detach-sign packages.adb
              echo "‚úÖ Packages signed successfully"
            fi
          }
          
          # Function to clean old APK files
          clean_old_apk() {
            if [ -f "index.json" ]; then
              echo "üßπ Cleaning old APK files..."
              local current_packages=$(jq -rc '.packages|to_entries[]|"\(.key)-\(.value)"' index.json | tr '\n' '|' | sed 's,|$,,')
              local old_files=$(ls -1 *.apk 2>/dev/null | grep -Ev "^($current_packages)" || true)
              
              if [ -n "$old_files" ]; then
                echo "Removing old packages: $old_files"
                echo "$old_files" | xargs rm -f
              fi
            fi
          }
          
          # Process built packages
          if [ -d "/workdir/bin" ]; then
            sudo chown -R $USER:$GROUPS /workdir/bin
            
            mkdir -p "$GITHUB_WORKSPACE/${{ inputs.ghpages_path }}/$BRANCH/packages/${{ inputs.arch }}/"
            
            # Remove old package directories
            rm -rf "$GITHUB_WORKSPACE/${{ inputs.ghpages_path }}/$BRANCH/packages/${{ inputs.arch }}/packages" 2>/dev/null || true
            rm -rf "$GITHUB_WORKSPACE/${{ inputs.ghpages_path }}/$BRANCH/packages/${{ inputs.arch }}/luci" 2>/dev/null || true
            
            # Process each feed
            for feed_spec in $EXTRA_FEEDS; do
              feed_name=$(echo "$feed_spec" | cut -f2 -d'|')
              target_name=${feed_name/$PACKAGE_PREFIX/}
              
              if [ -d "/workdir/bin/packages/${{ inputs.arch }}/$feed_name" ]; then
                echo "üì¶ Processing feed: $feed_name -> $target_name"
                
                # Copy packages
                cp -Rf "/workdir/bin/packages/${{ inputs.arch }}/$feed_name" \
                       "$GITHUB_WORKSPACE/${{ inputs.ghpages_path }}/$BRANCH/packages/${{ inputs.arch }}/$target_name"
                
                # Process packages in the target directory
                pushd "$GITHUB_WORKSPACE/${{ inputs.ghpages_path }}/$BRANCH/packages/${{ inputs.arch }}/$target_name"
                clean_old_apk
                sign_packages
                popd
              fi
            done
            
            # Create signing key files
            pushd "$GITHUB_WORKSPACE/${{ inputs.ghpages_path }}/$BRANCH"
            
            # APK signing key
            echo "$APK_SIGN_PUBKEY" > "${APK_SIGN_ID,,}.pub"
            
            # APK installation script
            cat > "${APK_SIGN_ID,,}.sh" << EOF
          #!/bin/sh
          KEYID=${APK_SIGN_ID,,}
          mkdir -p /etc/apk/keys 2>/dev/null
          cat > /etc/apk/keys/fantastic-packages-\${KEYID}.pem << 'PUBKEY'
          ${APK_SIGN_PUBKEY}
          PUBKEY
          EOF
            chmod +x "${APK_SIGN_ID,,}.sh"
            
            # GPG files
            if [ "$GPG_SIGN" = "true" ] && [ -n "$GPG_ID" ]; then
              echo "${GPG_FINGER}" > "${GPG_ID}.gpg.finger"
              echo "${GPG_PUBKEY}" > "${GPG_ID}.gpg.pub"
              
              if [ -f "$GITHUB_WORKSPACE/keys/gpg/${GPG_ID}.rev" ]; then
                cp -f "$GITHUB_WORKSPACE/keys/gpg/${GPG_ID}.rev" "${GPG_ID}.gpg.rev"
              fi
            fi
            
            popd
            
            # Clean up build artifacts
            rm -rf /workdir/bin/targets 2>/dev/null || true
          fi
          
          echo "::endgroup::"

      # =====================================
      # üìä Results & Cleanup
      # =====================================
      - name: üìä Display build results
        if: success()
        run: |
          echo "::group::Build Results"
          
          if [ -d "/workdir/bin/packages/" ]; then
            echo "üì¶ Built packages structure:"
            find /workdir/bin/packages/ -name "*.apk" | head -20
            
            echo ""
            echo "üìä Package statistics:"
            find /workdir/bin/packages/ -name "*.apk" | wc -l | xargs echo "Total APK files:"
            find /workdir/bin/packages/ -name "*.apk" -exec du -ch {} + | tail -1 | xargs echo "Total size:"
          fi
          
          echo "::endgroup::"

      - name: üßπ Cleanup irrelevant files
        run: |
          echo "::group::Cleanup"
          
          # Keep only relevant architecture and board files
          find "${{ inputs.ghpages_path }}"/* -maxdepth 0 2>/dev/null | \
            grep -v "$BRANCH" | xargs -I{} rm -rf "{}" || true
          
          find "${{ inputs.ghpages_path }}/$BRANCH/packages"/* -maxdepth 0 2>/dev/null | \
            grep -v "${{ inputs.arch }}" | xargs -I{} rm -rf "{}" || true
          
          if [ -n "${{ inputs.board }}" ]; then
            find "${{ inputs.ghpages_path }}/$BRANCH/targets"/* -maxdepth 0 2>/dev/null | \
              grep -v "${{ inputs.board }}" | xargs -I{} rm -rf "{}" || true
            
            if [ -n "${{ inputs.subtarget }}" ]; then
              find "${{ inputs.ghpages_path }}/$BRANCH/targets/${{ inputs.board }}"/* -maxdepth 0 2>/dev/null | \
                grep -v "${{ inputs.subtarget }}" | xargs -I{} rm -rf "{}" || true
            fi
          fi
          
          echo "‚úÖ Cleanup completed"
          echo "::endgroup::"

      - name: üìã Final structure overview
        run: |
          echo "::group::Final Structure"
          
          if [ -d "${{ inputs.ghpages_path }}" ]; then
            echo "üìÅ Final deployment structure:"
            find "${{ inputs.ghpages_path }}" -type f | head -20
          fi
          
          echo "::endgroup::"

      # =====================================
      # üì§ Artifact Upload
      # =====================================
      - name: üì§ Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-packages-${{ env.OP_VERSION }}-${{ inputs.arch }}-${{ github.run_number }}
          path: ${{ inputs.ghpages_path }}/
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
          compression-level: 6

      # =====================================
      # üîß Final Cache Maintenance
      # =====================================
      - name: üîß Fix cache permissions
        if: always()
        run: |
          echo "üîß Fixing cache permissions..."
          sudo chmod -R o+r /workdir/FEEDS/ 2>/dev/null || true
          sudo chmod -R o+r /workdir/DL/ 2>/dev/null || true
          echo "‚úÖ Cache permissions fixed"