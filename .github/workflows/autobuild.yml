# Copyright (C) 2025 rtaserver-wrt
#
name: AutoCompiler OpenWrt Packages

on:
  workflow_run:
    workflows: ["Auto Sync App"]
    types:
      - completed

  push:
    branches:
      - main
    paths-ignore:
      - '.github/workflows/**'
      - 'README.md'

  workflow_dispatch:
    inputs:
      release:
        description: 'Build for a specific release. Leave empty to build for all.'
        required: false
        default: ''
        type: choice
        options:
          - ''
          - 'SNAPSHOT'
          - '24.10.2'
          - '23.05.5'

      arch:
        description: 'Build for a specific arch (e.g., x86_64, aarch64_cortex-a53). Leave empty to build for all.'
        required: false
        default: ''
        type: string
      compile_pkg:
        description: 'Compile specific packages (space-separated). Default: all in feeds.'
        required: false
        default: ''
        type: string
      verbose:
        description: 'Verbose build output'
        required: false
        default: '0'
        type: choice
        options:
          - '0' # No verbose
          - '1' # V=s
          - '2' # V=sc
      without_pages:
        description: 'Do not build and deploy GitHub Pages'
        required: true
        default: false
        type: boolean
      signed_packages:
        description: 'Enable package signing'
        required: false
        default: false
        type: boolean
      ignore_errors:
        description: 'Continue building even if some packages fail'
        required: false
        default: false
        type: boolean
      enable_index:
        description: 'Create package index'
        required: false
        default: true
        type: boolean
      no_refresh_check:
        description: 'Skip patch refresh check'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: auto-compiler-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_ipk:
    permissions:
      contents: write
    name: üèóÔ∏è Build Packages
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        release: ${{ fromJSON(inputs.release && format('["{0}"]', inputs.release) || '["SNAPSHOT", "24.10.2", "23.05.5"]') }}
        arch: ${{ fromJSON(inputs.arch && format('["{0}"]', inputs.arch) || '["x86_64", "mips_24kc", "mipsel_24kc", "arm_cortex-a7_neon-vfpv4", "aarch64_cortex-a53", "aarch64_cortex-a72", "aarch64_generic"]') }}

    env:
      SDK_CACHE_DIR: ${{ github.workspace }}/sdk_cache
      FEEDNAME: custom
      BUILD_LOG: 1
      INDEX: ${{ inputs.enable_index && '1' || '0' }}
      IGNORE_ERRORS: ${{ inputs.ignore_errors && '1' || '0' }}
      NO_REFRESH_CHECK: ${{ inputs.no_refresh_check && '1' || '0' }}

    steps:
      - name: üöÄ Checkout Repository
        uses: actions/checkout@v4

      - name: üõ†Ô∏è Install System Dependencies
        run: |
          echo "::group::Apt Cache & Dependencies Installation"
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends \
            build-essential clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
            python3-setuptools rsync swig unzip zlib1g-dev file wget zstd python3-pyelftools \
            shfmt jq
          sudo pip3 install --upgrade pip
          echo "::endgroup::"

      - name: üõ°Ô∏è Verify python3-setuptools Installation
        run: |
          echo "::group::üîç Verifying python3-setuptools installation"
          if ! python3 -c 'import setuptools' 2>/dev/null; then
            echo "python3-setuptools not found, attempting to install again..."
            sudo -E apt-get -qq update
            sudo -E apt-get -qq install python3-setuptools
            if ! python3 -c 'import setuptools' 2>/dev/null; then
              echo "‚ùå python3-setuptools installation failed!"
              python3 --version
              dpkg -l | grep python3
              exit 1
            else
              echo "‚úÖ python3-setuptools installed successfully."
            fi
          else
            echo "‚úÖ python3-setuptools is already installed."
          fi
          echo "::endgroup::"

      - name: ‚öôÔ∏è Prepare SDK Environment
        run: |
          echo "::group::Setting up SDK Cache Directory"
          mkdir -p $SDK_CACHE_DIR
          chmod 777 $SDK_CACHE_DIR
          echo "SDK Cache Directory: $SDK_CACHE_DIR"
          echo "::endgroup::"
      
      - name: üì¶ Cache OpenWrt SDK
        id: cache-sdk
        uses: actions/cache@v4
        with:
          path: ${{ env.SDK_CACHE_DIR }}/openwrt-sdk
          key: sdk-${{ runner.os }}-${{ matrix.release }}-${{ matrix.arch }}

      - name: üì• Download and Setup OpenWrt SDK
        if: steps.cache-sdk.outputs.cache-hit != 'true'
        run: |
          RELEASE="${{ matrix.release }}"
          ARCH="${{ matrix.arch }}"
          
          echo "::group::‚öôÔ∏è SDK Configuration for Release: $RELEASE, Arch: $ARCH"
          
          if [[ "$RELEASE" == "SNAPSHOT" ]]; then
            URL_PATH="snapshots/targets"
            GCC_VERSION="14.3.0"
            FILE_EXT="tar.zst"
            echo "üì¶ Using SNAPSHOT build. Packages will be in APK format."
          elif [[ "$RELEASE" == "24.10.2" ]]; then
            URL_PATH="releases/24.10.2/targets"
            GCC_VERSION="13.3.0"
            FILE_EXT="tar.zst"
            echo "üì¶ Using stable release 24.10.2. Packages will be in IPK format."
          elif [[ "$RELEASE" == "23.05.5" ]]; then
            URL_PATH="releases/23.05.5/targets"
            GCC_VERSION="12.3.0"
            FILE_EXT="tar.xz"
            echo "üì¶ Using stable release 23.05.5. Packages will be in IPK format."
          fi
          
          case "$ARCH" in
            "x86_64") TARGET="x86/64" ;;
            "mips_24kc") TARGET="ath79/generic" ;;
            "mipsel_24kc") TARGET="ramips/mt7621" ;;
            "arm_cortex-a7_neon-vfpv4") TARGET="bcm27xx/bcm2709" ;;
            "aarch64_cortex-a53") TARGET="bcm27xx/bcm2710" ;;
            "aarch64_cortex-a72") TARGET="bcm27xx/bcm2711" ;;
            "aarch64_generic") TARGET="rockchip/armv8" ;;
          esac
          
          SDK_FLAVOR=$(echo $TARGET | tr '/' '-')
          SDK_SUFFIX_EABI=$(if [[ "$ARCH" == "arm_cortex-a7_neon-vfpv4" ]]; then echo "_eabi"; fi)
          
          if [[ "$RELEASE" == "SNAPSHOT" ]]; then
            SDK_NAME="openwrt-sdk-${SDK_FLAVOR}_gcc-${GCC_VERSION}_musl${SDK_SUFFIX_EABI}.Linux-x86_64"
          else
            SDK_NAME="openwrt-sdk-${RELEASE}-${SDK_FLAVOR}_gcc-${GCC_VERSION}_musl${SDK_SUFFIX_EABI}.Linux-x86_64"
          fi
          
          SDK_URL="https://downloads.openwrt.org/${URL_PATH}/${TARGET}/${SDK_NAME}.${FILE_EXT}"
          echo "::endgroup::"
          echo "::group::üì• Downloading SDK"
          echo "Downloading from: $SDK_URL"
          wget -q "$SDK_URL" -O "$SDK_CACHE_DIR/sdk.${FILE_EXT}"
          echo "‚úÖ SDK downloaded."
          echo "::endgroup::"
          
          echo "::group::üì¶ Extracting SDK"
          mkdir -p "$SDK_CACHE_DIR/openwrt-sdk"
          if [[ "$FILE_EXT" == "tar.zst" ]]; then
            tar --use-compress-program=zstd -xf "$SDK_CACHE_DIR/sdk.${FILE_EXT}" --strip-components=1 -C "$SDK_CACHE_DIR/openwrt-sdk"
          else
            tar -xf "$SDK_CACHE_DIR/sdk.${FILE_EXT}" --strip-components=1 -C "$SDK_CACHE_DIR/openwrt-sdk"
          fi
          echo "‚úÖ SDK extracted to $SDK_CACHE_DIR/openwrt-sdk"
          echo "::endgroup::"
        
      - name: üìÇ Set SDK Path
        run: echo "SDK_PATH=${{ env.SDK_CACHE_DIR }}/openwrt-sdk" >> $GITHUB_ENV

      - name: üîë Setup Package Signing Key
        if: inputs.signed_packages
        run: |
          if [ -n "${{ secrets.OPENWRT_SIGNING_KEY }}" ]; then
            echo "${{ secrets.OPENWRT_SIGNING_KEY }}" > $SDK_PATH/key-build
            echo "CONFIG_SIGNED_PACKAGES=y" >> $GITHUB_ENV
          else
            echo "::warning::No signing key provided, packages will not be signed"
          fi

      - name: üìã Read Package List from Feeds
        if: ${{ inputs.compile_pkg == '' }}
        id: list_package
        run: |
          echo "::group::üìã Reading package list"
          find_packages() {
            local feed_dir="$1"
            if [ -d "$feed_dir" ]; then
              find -L "$feed_dir" -mindepth 1 -maxdepth 2 -type f -name "Makefile" -exec dirname {} \; | xargs -n1 basename | tr '\n' ' '
            fi
          }
          
          packages=$(find_packages "$GITHUB_WORKSPACE/feeds/packages")
          luci_packages=$(find_packages "$GITHUB_WORKSPACE/feeds/luci")
          
          echo "üì¶ Found packages: ${packages:-None}"
          echo "üé® Found LuCI packages: ${luci_packages:-None}"
          
          combined_packages=$(echo "$packages $luci_packages" | xargs -n1 | sort -u | xargs)
          echo "‚ú® Combined unique packages: $combined_packages"
          echo "::endgroup::"
          echo "content=$combined_packages" >> $GITHUB_OUTPUT

      - name: üìú List Packages to Compile
        run: |
          echo "::group::üì¶ Packages to be compiled"
          PACKAGES_TO_BUILD="${{ steps.list_package.outputs.content }} ${{ inputs.compile_pkg }}"
          echo "PACKAGES=$(echo $PACKAGES_TO_BUILD | xargs)" >> $GITHUB_ENV
          echo "$PACKAGES_TO_BUILD"
          echo "::endgroup::"

      - name: üì¶ Cache OpenWrt dl Directory
        id: cache-dl
        uses: actions/cache@v4
        with:
          path: ${{ env.SDK_CACHE_DIR }}/openwrt-sdk/dl
          key: dl-${{ runner.os }}-${{ matrix.release }}-${{ matrix.arch }}

      - name: üõ†Ô∏è Setup SDK Feeds and Configuration
        run: |
          cd $SDK_PATH
          echo "::group::üìú Configuring Feeds"
          
          # Setup feeds.conf based on reference script
          if [ -z "$NO_DEFAULT_FEEDS" ]; then
            sed \
              -e 's,https://git.openwrt.org/feed/,https://github.com/openwrt/,' \
              -e 's,https://git.openwrt.org/openwrt/,https://github.com/openwrt/,' \
              -e 's,https://git.openwrt.org/project/,https://github.com/openwrt/,' \
              feeds.conf.default > feeds.conf
          fi
          
          # Add custom feed
          echo "src-link $FEEDNAME $GITHUB_WORKSPACE/feeds" >> feeds.conf
          
          echo "Feeds configuration:"
          cat feeds.conf
          echo "::endgroup::"
          
          echo "::group::üîÑ Updating and Installing Feeds"
          ./scripts/feeds update -a
          echo "::endgroup::"
          
          make defconfig
          echo "‚úÖ Default configuration generated."
          echo "::endgroup::"

      - name: üì¶ Build Packages
        run: |
          cd $SDK_PATH
          mkdir -p /tmp/artifacts
          
          # Set verbose flag
          V_FLAG=""
          if [ "${{ inputs.verbose }}" = "1" ]; then V_FLAG="V=s"; fi
          if [ "${{ inputs.verbose }}" = "2" ]; then V_FLAG="V=sc"; fi
          
          BUILD_SUCCESS=true
          
          if [ -z "$PACKAGES" ]; then
            echo "::group::üì¶ Building all packages in custom feeds"
            # Install all packages from custom feed
            ./scripts/feeds install -p "$FEEDNAME" -f -a
            
            # Build all packages
            make \
              BUILD_LOG="$BUILD_LOG" \
              CONFIG_SIGNED_PACKAGES="${CONFIG_SIGNED_PACKAGES:-n}" \
              IGNORE_ERRORS="$IGNORE_ERRORS" \
              CONFIG_AUTOREMOVE=y \
              $V_FLAG \
              -j$(nproc) || BUILD_SUCCESS=false
            echo "::endgroup::"
          else
            echo "::group::üì¶ Building specific packages with validation"
            
            for PKG in $PACKAGES; do
              echo "::group::üì¶ Processing Package: $PKG"
              
              # Install package
              ./scripts/feeds install -p "$FEEDNAME" -f "$PKG"
              
              # Download sources
              echo "::group::üì• Downloading sources for $PKG"
              make \
                BUILD_LOG="$BUILD_LOG" \
                IGNORE_ERRORS="$IGNORE_ERRORS" \
                "package/$PKG/download" V=s
              echo "::endgroup::"
              
              # Check patches if not disabled
              if [ "$NO_REFRESH_CHECK" != "1" ]; then
                PATCHES_DIR=$(find $GITHUB_WORKSPACE/feeds -path "*/$PKG/patches" 2>/dev/null || true)
                if [ -d "$PATCHES_DIR" ]; then
                  echo "::group::üîß Checking patches for $PKG"
                  make \
                    BUILD_LOG="$BUILD_LOG" \
                    IGNORE_ERRORS="$IGNORE_ERRORS" \
                    "package/$PKG/refresh" V=s
                  
                  if ! git -C "$PATCHES_DIR" diff --quiet -- .; then
                    echo "::error::Dirty patches detected for $PKG, please refresh and review the diff"
                    git -C "$PATCHES_DIR" checkout -- .
                    BUILD_SUCCESS=false
                    echo "::endgroup::"
                    break
                  fi
                  
                  make \
                    BUILD_LOG="$BUILD_LOG" \
                    IGNORE_ERRORS="$IGNORE_ERRORS" \
                    "package/$PKG/clean" V=s
                  echo "::endgroup::"
                fi
              fi
              
              # Check init scripts formatting
              FILES_DIR=$(find $GITHUB_WORKSPACE/feeds -path "*/$PKG/files" 2>/dev/null || true)
              if [ -d "$FILES_DIR" ]; then
                echo "::group::üìù Checking init scripts format for $PKG"
                find "$FILES_DIR" -name "*.init" -exec shfmt -w -sr -s '{}' \; 2>/dev/null || true
                if ! git -C "$FILES_DIR" diff --quiet -- . 2>/dev/null; then
                  echo "::error::Init script must be formatted for $PKG. Please run through shfmt -w -sr -s"
                  git -C "$FILES_DIR" checkout -- . 2>/dev/null || true
                  BUILD_SUCCESS=false
                  echo "::endgroup::"
                  break
                fi
                echo "::endgroup::"
              fi
              
              # Compile package
              echo "::group::üî® Compiling $PKG"
              make \
                BUILD_LOG="$BUILD_LOG" \
                CONFIG_SIGNED_PACKAGES="${CONFIG_SIGNED_PACKAGES:-n}" \
                IGNORE_ERRORS="$IGNORE_ERRORS" \
                CONFIG_AUTOREMOVE=y \
                $V_FLAG \
                -j$(nproc) \
                "package/$PKG/compile" || {
                  echo "::error::Failed to build package: $PKG"
                  BUILD_SUCCESS=false
                  echo "::endgroup::"
                  break
                }
              echo "::endgroup::"
              echo "::endgroup::"
            done
          fi
          
          # Create package index if enabled and build was successful
          if [ "$BUILD_SUCCESS" = "true" ] && [ "$INDEX" = "1" ]; then
            echo "::group::üìá Creating package index"
            make package/index || echo "‚ö†Ô∏è Failed to create package index."
            echo "::endgroup::"
          fi
          
          # Move artifacts
          if [ -d bin/ ]; then
            mv bin/ /tmp/artifacts/
          fi
          
          if [ -d logs/ ]; then
            mv logs/ /tmp/artifacts/
          fi
          
          if [ "$BUILD_SUCCESS" != "true" ]; then
            echo "::error::One or more packages failed to build."
            exit 1
          fi

      - name: üóÇÔ∏è Collect Artifacts
        if: always()
        run: |
          echo "::group::üóÇÔ∏è Preparing Artifacts"
          mkdir -p $GITHUB_WORKSPACE/artifacts/bin/packages/${{ matrix.arch }}
          mkdir -p $GITHUB_WORKSPACE/artifacts/logs
          
          if [ -d /tmp/artifacts/bin ]; then
            echo "‚ú® Bin Directory Structure:"
            ls -R /tmp/artifacts/bin/packages 2>/dev/null || true
            
            echo "Copying built packages..."
            cp -r /tmp/artifacts/bin/packages/${{ matrix.arch }}/${{ env.FEEDNAME }}/* $GITHUB_WORKSPACE/artifacts/bin/packages/${{ matrix.arch }}/ 2>/dev/null || echo "No custom packages found to copy."
          fi
          
          if [ -d /tmp/artifacts/logs ]; then
            echo "Copying build logs..."
            cp -r /tmp/artifacts/logs/* $GITHUB_WORKSPACE/artifacts/logs/ 2>/dev/null || true
          fi
          
          echo "‚ú® Artifacts structure:"
          ls -R $GITHUB_WORKSPACE/artifacts 2>/dev/null || true
          echo "::endgroup::"

      - name: üì§ Upload Packages Artifact
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-packages-${{ matrix.release }}-${{ matrix.arch }}
          path: ${{ github.workspace }}/artifacts/bin/packages/${{ matrix.arch }}/*
          retention-days: 5

      - name: üì§ Upload Build Logs on Failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.release }}-${{ matrix.arch }}
          path: ${{ github.workspace }}/artifacts/logs/
          retention-days: 5

  push_packages:
    needs: build_ipk
    if: success() || failure()
    name: üöÄ Push Packages to gh-pages
    permissions:
      contents: write
    runs-on: ubuntu-22.04
    steps:
      - name: üöÄ Checkout gh-pages Branch
        uses: actions/checkout@v4
        with:
          ref: 'gh-pages'

      - name: üì• Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: üìÇ Organize Packages
        run: |
          echo "::group::Sorting packages into release directories"
          for dir in ./artifacts/openwrt-packages-*; do
            if [ -d "$dir" ]; then
              # Format: openwrt-packages-RELEASE-ARCH
              RELEASE=$(echo "$dir" | cut -d'-' -f3)
              ARCH=$(echo "$dir" | cut -d'-' -f4)
              
              if [[ "$RELEASE" == "SNAPSHOT" ]]; then
                TARGET_DIR="releases/snapshot/packages/$ARCH"
              else
                VERSION_MAJOR=$(echo $RELEASE | cut -d'.' -f1-2)
                TARGET_DIR="releases/$VERSION_MAJOR/packages/$ARCH"
              fi
              
              echo "Moving packages from $dir to $TARGET_DIR"
              mkdir -p "$TARGET_DIR"
              mv $dir/* "$TARGET_DIR/" 2>/dev/null || true
            fi
          done
          echo "::endgroup::"
          
          echo "::group::Final repository structure"
          ls -R releases 2>/dev/null || true
          echo "::endgroup::"
          
          rm -rf ./artifacts

      - name: üíæ Commit and Push Changes
        run: |
          git config --local user.name "GitHub Action"
          git config --local user.email "actions-user@users.noreply.github.com"
          git add releases
          if ! git diff --staged --quiet; then
            git commit -m "üöÄ Update Packages - $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            git push
          else
            echo "‚úÖ No new packages to commit."
          fi

  build_and_deploy_pages:
    needs: push_packages
    if: inputs.without_pages == false && (success() || failure())
    name: üåê Deploy to GitHub Pages
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-22.04
    steps:
      - name: üöÄ Checkout gh-pages Branch
        uses: actions/checkout@v4
        with:
          ref: 'gh-pages'
          submodules: true

      - name: üíé Setup Ruby and Jekyll
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true

      - name: üìú Run Pre-build Script
        env:
          SERVER_HOME: releases
        run: |
          if [ -f "./prenodes.sh" ]; then
            echo "Running prenodes.sh..."
            chmod +x ./prenodes.sh
            ./prenodes.sh
          else
            echo "prenodes.sh not found, skipping."
          fi

      - name: üõ†Ô∏è Configure GitHub Pages
        id: pages
        uses: actions/configure-pages@v5

      - name: üèóÔ∏è Build with Jekyll
        run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production

      - name: üì§ Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3

      - name: üöÄ Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4