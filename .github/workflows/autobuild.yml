# Copyright (C) 2025 rtaserver-wrt

name: 🏗️ AutoCompiler OpenWrt Packages

on:
  # workflow_run:
  #   workflows: ["Auto Sync App"]
  #   types: [completed]

  push:
    branches: [main]
    paths-ignore:
      - '.github/workflows/**'
      - 'README.md'
    paths:
      - 'feeds/**'

  workflow_dispatch:
    inputs:
      compile_pkg:
        description: '📦 Compile packages (default: all packages)'
        required: false
        default: ''
        type: string

      verbose:
        description: '🔍 Verbose output level'
        required: false
        default: '0'
        type: choice
        options: ['0', '1', '2']

      without_pages:
        description: '🚫 Skip GitHub Pages deployment'
        required: true
        default: false
        type: boolean

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: auto-compiler-${{ github.ref }}
  cancel-in-progress: true

env:
  # 🎯 Global environment variables
  DEBIAN_FRONTEND: noninteractive
  FORCE_UNSAFE_CONFIGURE: 1

jobs:
  # 🔨 Main compilation job with matrix strategy
  build_ipk:
    name: 🏗️ Build [${{ matrix.release }}] [${{ matrix.arch }}]
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    
    env:
      SDK_CACHE_DIR: ${{ github.workspace }}/sdk_cache
    
    strategy:
      fail-fast: false
      matrix:
        release: [
          SNAPSHOT, 
          24.10.2, 
          23.05.5
        ]
        arch: [
          x86_64,
          mips_24kc,
          mipsel_24kc,
          arm_cortex-a7_neon-vfpv4,
          aarch64_cortex-a53,
          aarch64_cortex-a72,
          aarch64_generic
        ]

    steps:
      # 📥 Repository setup
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 1

      # ⚡ Smart caching for dependencies
      - name: ⚡ Cache APT Packages
        uses: actions/cache@v4
        with:
          path: /var/cache/apt
          key: ${{ runner.os }}-apt-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-apt-

      # 🔧 Install build dependencies
      - name: 🔧 Install Build Dependencies
        run: |
          echo "::group::🔧 Installing build dependencies"
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends \
            build-essential clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
            python3-setuptools rsync swig unzip zlib1g-dev file wget
          
          # 🐍 Python dependencies
          sudo pip3 install --upgrade pip
          sudo pip3 install meson ninja
          echo "::endgroup::"

      # 📁 Prepare SDK cache
      - name: 📁 Prepare SDK Cache Directory
        run: |
          mkdir -p $SDK_CACHE_DIR
          chmod 777 $SDK_CACHE_DIR

      # 💾 Smart SDK caching
      - name: 💾 Cache OpenWrt SDK
        id: cache-sdk
        uses: actions/cache@v4
        with:
          path: ${{ env.SDK_CACHE_DIR }}
          key: sdk-${{ matrix.release }}-${{ matrix.arch }}-v2
          restore-keys: sdk-${{ matrix.release }}-

      # 📦 Download and setup SDK
      - name: 📦 Download and Setup OpenWrt SDK
        if: steps.cache-sdk.outputs.cache-hit != 'true'
        run: |
          echo "::group::📦 Setting up OpenWrt SDK"
          
          RELEASE="${{ matrix.release }}"
          ARCH="${{ matrix.arch }}"

          # 🎯 Configure release-specific parameters
          if [[ "$RELEASE" == "SNAPSHOT" ]]; then
            URL_PATH="snapshots/targets"
            GCC_VERSION="14.3.0"
            FILE_EXT="tar.zst"
            echo "🔥 Using SNAPSHOT build - packages will be in APK format"
          elif [[ "$RELEASE" == "24.10.2" ]]; then
            URL_PATH="releases/24.10.2/targets"
            GCC_VERSION="13.3.0"
            FILE_EXT="tar.zst"
            echo "📦 Using stable release - packages will be in IPK format"
          elif [[ "$RELEASE" == "23.05.5" ]]; then
            URL_PATH="releases/23.05.5/targets"
            GCC_VERSION="12.3.0"
            FILE_EXT="tar.xz"
            echo "📦 Using stable release - packages will be in IPK format"
          fi

          # 🎯 Architecture-specific configuration
          case "$ARCH" in
            "x86_64")
              TARGET="x86/64"
              SDK_PREFIX="x86-64"
              ;;
            "mips_24kc")
              TARGET="ath79/generic"
              SDK_PREFIX="ath79-generic"
              ;;
            "mipsel_24kc")
              TARGET="ramips/mt7621"
              SDK_PREFIX="ramips-mt7621"
              ;;
            "arm_cortex-a7_neon-vfpv4")
              TARGET="bcm27xx/bcm2709"
              SDK_PREFIX="bcm27xx-bcm2709"
              ;;
            "aarch64_cortex-a53")
              TARGET="bcm27xx/bcm2710"
              SDK_PREFIX="bcm27xx-bcm2710"
              ;;
            "aarch64_cortex-a72")
              TARGET="bcm27xx/bcm2711"
              SDK_PREFIX="bcm27xx-bcm2711"
              ;;
            "aarch64_generic")
              TARGET="rockchip/armv8"
              SDK_PREFIX="rockchip-armv8"
              ;;
          esac

          # 🔗 Build SDK name and URL
          if [[ "$RELEASE" == "SNAPSHOT" ]]; then
            SDK_NAME="openwrt-sdk-${SDK_PREFIX}_gcc-${GCC_VERSION}_musl"
            [[ "$ARCH" == "arm_cortex-a7_neon-vfpv4" ]] && SDK_NAME="${SDK_NAME}_eabi"
            SDK_NAME="${SDK_NAME}.Linux-x86_64"
          else
            SDK_NAME="openwrt-sdk-${RELEASE}-${SDK_PREFIX}_gcc-${GCC_VERSION}_musl"
            [[ "$ARCH" == "arm_cortex-a7_neon-vfpv4" ]] && SDK_NAME="${SDK_NAME}_eabi"
            SDK_NAME="${SDK_NAME}.Linux-x86_64"
          fi

          SDK_URL="https://downloads.openwrt.org/${URL_PATH}/${TARGET}/${SDK_NAME}.${FILE_EXT}"

          echo "🌐 Downloading SDK from: $SDK_URL"
          wget -q "$SDK_URL" -O "$SDK_CACHE_DIR/sdk.${FILE_EXT}"

          echo "📂 Extracting SDK..."
          mkdir -p "$SDK_CACHE_DIR"
          
          # 🗜️ Smart extraction based on file type
          if [[ "$FILE_EXT" == "tar.zst" ]]; then
            if command -v tar &> /dev/null && tar --use-compress-program=zstd -tf "$SDK_CACHE_DIR/sdk.tar.zst" >/dev/null 2>&1; then
              tar --use-compress-program=zstd -xf "$SDK_CACHE_DIR/sdk.tar.zst" -C "$SDK_CACHE_DIR"
            else
              zstd -d "$SDK_CACHE_DIR/sdk.${FILE_EXT}" -o "$SDK_CACHE_DIR/sdk.tar"
              tar -xf "$SDK_CACHE_DIR/sdk.tar" -C "$SDK_CACHE_DIR"
            fi
          else
            tar -xf "$SDK_CACHE_DIR/sdk.${FILE_EXT}" -C "$SDK_CACHE_DIR"
          fi

          mv "$SDK_CACHE_DIR/$SDK_NAME" "$SDK_CACHE_DIR/openwrt-sdk"
          echo "✅ SDK setup completed"
          echo "::endgroup::"

      # 🎯 Set SDK path
      - name: 🎯 Configure SDK Path
        run: echo "SDK_PATH=${{ env.SDK_CACHE_DIR }}/openwrt-sdk" >> $GITHUB_ENV

      # 📋 Read package list
      - name: 📋 Discover Available Packages
        if: ${{ inputs.compile_pkg == '' }}
        id: list_package
        run: |
          echo "::group::📋 Scanning for packages"
          
          _packages=""
          _luci=""
          
          # 🔍 Scan packages feed
          if [ -d "$GITHUB_WORKSPACE/feeds/packages" ]; then
            _packages="$(find $GITHUB_WORKSPACE/feeds/packages -mindepth 1 -maxdepth 2 -type d -name "*" | while read pkg_dir; do
              if [ -f "$pkg_dir/Makefile" ]; then
                basename "$pkg_dir"
              fi
            done | tr '\n' ' ' | sed 's/[[:space:]]*$//')"
          fi
          
          # 🎨 Scan LuCI feed
          if [ -d "$GITHUB_WORKSPACE/feeds/luci" ]; then
            _luci="$(find $GITHUB_WORKSPACE/feeds/luci -mindepth 1 -maxdepth 2 -type d -name "*" | while read pkg_dir; do
              if [ -f "$pkg_dir/Makefile" ]; then
                basename "$pkg_dir"
              fi
            done | tr '\n' ' ' | sed 's/[[:space:]]*$//')"
          fi
          
          # 📊 Report findings
          if [ -z "$_packages" ]; then
            echo "⚠️ No packages found in feeds/packages"
          else
            echo "📦 Found packages: $_packages"
          fi
          
          if [ -z "$_luci" ]; then
            echo "⚠️ No LuCI packages found in feeds/luci"
          else
            echo "🎨 Found LuCI packages: $_luci"
          fi
          
          # 🔄 Combine and deduplicate
          combined_packages="$_packages $_luci"
          combined_packages=$(echo "$combined_packages" | xargs -n1 | sort -u | xargs)
          
          echo "📋 Combined packages: $combined_packages"
          echo "content=$combined_packages" >> $GITHUB_OUTPUT
          echo "::endgroup::"

      # 📄 Display compilation target
      - name: 📄 Display Compilation Targets
        run: |
          echo "🎯 **Compilation Targets**"
          echo "📦 Packages: ${{ steps.list_package.outputs.content }} ${{ inputs.compile_pkg }}"
          echo "🏗️ Architecture: ${{ matrix.arch }}"
          echo "📋 Release: ${{ matrix.release }}"

      # 📁 Create artifact directory
      - name: 📁 Prepare Artifact Directory
        run: mkdir -p artifacts

      # ⚙️ Setup SDK feeds
      - name: ⚙️ Configure SDK Feeds
        run: |
          echo "::group::⚙️ Setting up SDK feeds"
          cd $SDK_PATH
          
          # 🔗 Configure default feeds
          if [ -z "$NO_DEFAULT_FEEDS" ]; then
            sed \
              -e 's,https://git.openwrt.org/feed/,https://github.com/openwrt/,' \
              -e 's,https://git.openwrt.org/openwrt/,https://github.com/openwrt/,' \
              -e 's,https://git.openwrt.org/project/,https://github.com/openwrt/,' \
              feeds.conf.default > feeds.conf
          fi
          
          # 📦 Add custom feed
          FEEDNAME="custom"
          echo "src-link $FEEDNAME $GITHUB_WORKSPACE/feeds/" >> feeds.conf
          
          echo "📋 Feed configuration:"
          cat feeds.conf
          
          # 🔄 Update and install feeds
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          echo "::endgroup::"

      # 📂 Copy package sources
      - name: 📂 Import Package Sources
        run: |
          echo "::group::📂 Importing package sources"
          cd $SDK_PATH
          if [ -d "$GITHUB_WORKSPACE/package" ]; then
            echo "📦 Copying root package directory..."
            cp -r $GITHUB_WORKSPACE/package/* ./package/ 2>/dev/null || true
            echo "✅ Package sources imported"
          else
            echo "ℹ️ No root package directory found"
          fi
          echo "::endgroup::"

      # ⚙️ Generate configuration
      - name: ⚙️ Generate Build Configuration
        run: |
          echo "::group::⚙️ Generating build configuration"
          cd $SDK_PATH
          make defconfig
          echo "✅ Default configuration generated"
          echo "::endgroup::"

      # 🔐 Disable package signing
      - name: 🔐 Configure Package Signing
        run: |
          echo "::group::🔐 Configuring package signing"
          cd $SDK_PATH
          echo "CONFIG_SIGNED_PACKAGES=n" >> .config
          make defconfig
          echo "✅ Package signing disabled for faster builds"
          echo "::endgroup::"

      # 🏗️ Build packages
      - name: 🏗️ Compile Packages
        run: |
          echo "::group::🏗️ Starting package compilation"
          cd $SDK_PATH
          
          # 🔍 Set verbosity level
          case "${{ inputs.verbose }}" in
            "1") V="V=s" ;;
            "2") V="V=sc" ;;
            *) V="" ;;
          esac
          
          # 📦 Prepare package list
          PACKAGES="${{ steps.list_package.outputs.content }} ${{ inputs.compile_pkg }}"
          PACKAGES=$(echo $PACKAGES | xargs)
          echo "🎯 Building packages: $PACKAGES"
          
          # 🌍 Set build environment
          export BUILD_LOG=1
          export CONFIG_ALL_NONSHARED=n
          export CONFIG_ALL_KMODS=n
          export CONFIG_ALL=n
          export CONFIG_AUTOREMOVE=n
          export CONFIG_SIGNED_PACKAGES=n
          export FEEDNAME="custom"
          
          RET=0
          
          echo "::group::📋 Available packages in feeds"
          ./scripts/feeds list | grep -E "^(custom|base)" || echo "ℹ️ No custom packages found in feeds"
          echo "::endgroup::"
          
          # 🔨 Build process
          if [ -n "$PACKAGES" ]; then
            for PKG in $PACKAGES; do
              echo "::group::🔨 Building package: $PKG"
              ./scripts/feeds install -p "$FEEDNAME" -f "$PKG" || true
              
              if make -f .config -f tmp/.packagedeps -f <(echo "\$(info \$(sort \$(package-y) \$(package-m)))"; echo -en "a:\n\t@:") 2>/dev/null | tr ' ' '\n' | grep -qE "(^|/)$PKG$"; then
                echo "🏗️ Compiling $PKG..."
                if make package/$PKG/compile $V -j$(nproc); then
                  echo "✅ Successfully built $PKG"
                  find bin/packages/ -name "*$PKG*" -type f 2>/dev/null || echo "ℹ️ No package files found for $PKG"
                else
                  echo "❌ Failed to build package: $PKG"
                  RET=1
                fi
              else
                echo "⚠️ Skipping $PKG (unsupported architecture or package not found)"
              fi
              echo "::endgroup::"
            done
          else
            echo "🏗️ Building all custom packages"
            ./scripts/feeds install -p "$FEEDNAME" -f -a
            make package/compile $V -j$(nproc) || RET=$?
          fi
          
          echo "::group::📊 Build Results Summary"
          echo "📦 Packages in bin/packages/:"
          find bin/packages/ -name "*.ipk" -o -name "*.apk" 2>/dev/null | head -20 || echo "ℹ️ No packages found"
          echo "::endgroup::"
          
          # 📇 Create package index
          if [ "$RET" -eq 0 ]; then
            echo "::group::📇 Creating package index"
            if [ "${{ matrix.release }}" = "SNAPSHOT" ]; then
              make package/index -j1 V=s CONFIG_SIGNED_PACKAGES=n || echo "⚠️ APK package index creation failed"
            else
              make package/index -j1 V=s CONFIG_SIGNED_PACKAGES=n || echo "⚠️ IPK package index creation failed"
            fi
            echo "::endgroup::"
          fi
          
          echo "::endgroup::"
          exit $RET

      # 📦 Copy built packages
      - name: 📦 Collect Build Artifacts
        if: success() || failure()
        run: |
          echo "::group::📦 Collecting build artifacts"
          cd $SDK_PATH
          
          # 📁 Create artifact directories
          mkdir -p $GITHUB_WORKSPACE/artifacts/bin/packages/${{ matrix.arch }}
          mkdir -p $GITHUB_WORKSPACE/artifacts/logs
          
          echo "::group::🔍 Debug - Directory Analysis"
          echo "📍 Current directory: $(pwd)"
          echo "🔍 Checking for packages in bin/packages/${{ matrix.arch }}/"
          ls -la bin/packages/${{ matrix.arch }}/ 2>/dev/null || echo "ℹ️ Directory bin/packages/${{ matrix.arch }}/ does not exist"
          echo "🔍 Searching for any packages in bin/packages/"
          find bin/packages/ -name "*.ipk" -o -name "*.apk" 2>/dev/null | head -10 || echo "ℹ️ No packages found"
          echo "🗂️ Full bin directory structure:"
          find bin/ -type f -name "*.ipk" -o -name "*.apk" 2>/dev/null || echo "ℹ️ No package files found in bin/"
          echo "::endgroup::"
          
          # 📦 Copy packages
          echo "📦 Copying packages from architecture directory"
          if [ -d "./bin/packages/${{ matrix.arch }}/custom" ]; then
            echo "✅ Found custom packages directory"
            cp -r ./bin/packages/${{ matrix.arch }}/custom/* $GITHUB_WORKSPACE/artifacts/bin/packages/${{ matrix.arch }}/ 2>/dev/null || true
          else
            echo "ℹ️ No custom packages directory found"
          fi
          
          # 📋 Copy logs
          if [ -d "./logs/package/feeds/custom" ]; then
            cp -r ./logs/package/feeds/custom/* $GITHUB_WORKSPACE/artifacts/logs/ 2>/dev/null || true
          fi
          
          if [ -d "./logs" ]; then
            find ./logs -name "*.log" -exec cp {} $GITHUB_WORKSPACE/artifacts/logs/ \; 2>/dev/null || true
          fi
          
          # 📊 Summary
          if [ "${{ matrix.release }}" = "SNAPSHOT" ]; then
            PKG_EXT="*.apk"
            PKG_TYPE="APK"
          else
            PKG_EXT="*.ipk" 
            PKG_TYPE="IPK"
          fi
          
          echo "📦 Built packages ($PKG_TYPE format):"
          find $GITHUB_WORKSPACE/artifacts -name "$PKG_EXT" -type f | head -20
          
          PKG_COUNT=$(find $GITHUB_WORKSPACE/artifacts -name "$PKG_EXT" -type f | wc -l)
          echo "📊 Total $PKG_TYPE packages built: $PKG_COUNT"
          
          echo "📋 All package files found:"
          find $GITHUB_WORKSPACE/artifacts -name "*.ipk" -o -name "*.apk" | head -20
          
          echo "::group::📂 Final artifacts structure"
          find $GITHUB_WORKSPACE/artifacts -type f | head -20 || echo "ℹ️ No artifacts found"
          echo "::endgroup::"
          echo "::endgroup::"

      # 📤 Upload packages
      - name: 📤 Upload Package Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: openwrt_${{ matrix.release }}_${{ matrix.arch }}
          path: ${{ github.workspace }}/artifacts/bin/packages/${{ matrix.arch }}/*
          retention-days: 30

      # 📋 Upload build logs on failure
      - name: 📋 Upload Build Logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build_logs_${{ matrix.release }}_${{ matrix.arch }}
          path: ${{ github.workspace }}/artifacts/logs/*
          retention-days: 7

  # 🚀 Push packages to gh-pages
  push_packages:
    name: 🚀 Deploy Packages to Repository
    needs: build_ipk
    if: success() || failure()
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    
    steps:
      # 📥 Checkout gh-pages branch
      - name: 📥 Checkout Pages Branch
        uses: actions/checkout@v4
        with:
          ref: 'gh-pages'
          lfs: false
          submodules: false

      # 📦 Download all artifacts
      - name: 📦 Download Build Artifacts
        uses: actions/download-artifact@v4

      # 🧹 Clean up logs
      - name: 🧹 Clean Build Logs
        run: sudo rm -rf build_logs*

      # 📁 Organize packages by release
      - name: 📁 Organize Package Structure
        shell: bash
        run: |
          echo "::group::📁 Organizing package structure"
          mkdir -p releases 2>/dev/null
          
          # 🎯 Define supported versions and architectures
          version=( SNAPSHOT 24.10.2 23.05.5 )
          archi=( x86_64 mips_24kc mipsel_24kc arm_cortex-a7_neon-vfpv4 aarch64_cortex-a53 aarch64_cortex-a72 aarch64_generic )

          for vr in ${version[*]}; do
            # 📋 Convert version format
            if [[ "$vr" == "SNAPSHOT" ]]; then
              vers="snapshot"
            else
              vers=$(echo $vr | sed 's/..$//')
            fi

            echo "🔄 Processing version: $vr -> $vers"

            for arc in ${archi[*]}; do
              artifact_dir="openwrt_${vr}_${arc}"
              
              if [ -d "$artifact_dir" ]; then
                echo "✅ Processing $artifact_dir"
                rm -rf releases/$vers/packages/$arc
                mkdir -p releases/$vers/packages/$arc
                cp -rf $artifact_dir/* releases/$vers/packages/$arc/
                
                # 🧹 Remove unwanted directories
                rm -rf releases/$vers/packages/$arc/routing releases/$vers/packages/$arc/telephony
              else
                echo "⚠️ Artifact directory $artifact_dir not found"
              fi
            done
          done

          # 🧹 Clean up temporary artifacts
          rm -rf openwrt_* 2>/dev/null || true
          echo "::endgroup::"

      # 📋 Display final structure
      - name: 📋 Display Package Structure
        working-directory: releases
        run: |
          echo "::group::📋 Final package structure"
          ls -R
          echo "::endgroup::"

      # 🚀 Commit and push changes
      - name: 🚀 Commit and Push Changes
        env:
          Branch: gh-pages
        run: |
          echo "::group::🚀 Publishing packages"
          git config --local user.name "🤖 GitHub Action"
          git config --local user.email "actions-user@users.noreply.github.com"
          git add .
          
          if ! git diff --staged --quiet; then
            git commit -m "🚀 Update Packages - $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            git push
            echo "✅ Packages published successfully"
          else
            echo "ℹ️ No changes to commit"
          fi
          echo "::endgroup::"

  # 📄 Build GitHub Pages
  build_pages:
    name: 📄 Build GitHub Pages
    needs: push_packages
    if: inputs.without_pages == false && !cancelled()
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    
    steps:
      # 📥 Checkout pages branch
      - name: 📥 Checkout Pages Branch
        uses: actions/checkout@v4
        with:
          ref: 'gh-pages'
          lfs: true
          submodules: true

      # 💎 Setup Ruby environment
      - name: 💎 Setup Ruby Environment
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true
          cache-version: 0

      # ⚙️ Pre-processing script
      - name: ⚙️ Run Pre-processing
        env:
          SERVER_HOME: releases
        run: |
          echo "::group::⚙️ Running pre-processing"
          if [ -f "./prenodes.sh" ]; then
            chmod +x ./prenodes.sh
            ./prenodes.sh
            echo "✅ Pre-processing completed"
          else
            echo "ℹ️ prenodes.sh not found, skipping"
          fi
          echo "::endgroup::"

      # 📄 Configure pages
      - name: 📄 Configure GitHub Pages
        id: pages
        uses: actions/configure-pages@v5

      # 🏗️ Build with Jekyll
      - name: 🏗️ Build Jekyll Site
        run: |
          echo "::group::🏗️ Building Jekyll site"
          bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
          echo "✅ Jekyll site built successfully"
          echo "::endgroup::"
        env:
          JEKYLL_ENV: production

      # 📤 Upload pages artifact
      - name: 📤 Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3

  # 🌐 Deploy to GitHub Pages
  deploy:
    name: 🌐 Deploy to GitHub Pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-22.04
    needs: build_pages
    if: inputs.without_pages == false && !cancelled()
    
    steps:
      # 🚀 Deploy to GitHub Pages
      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # 🧹 Cleanup artifacts and old runs
  clear_artifact:
    name: 🧹 Cleanup Workflow Artifacts
    needs: push_packages
    if: always()
    runs-on: ubuntu-22.04
    permissions:
      actions: write
      contents: read
    
    steps:
      # 🗑️ Clean old workflow runs
      - name: 🗑️ Clean Old Workflow Runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          retain_days: 5
          keep_minimum_runs: 2