name: 🚀 AutoCompiler OpenWrt Packages

on:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/workflows/**'
      - 'README.md'
      - 'docs/**'
      - '*.md'
    
  workflow_dispatch:
    inputs:
      compile_pkg:
        description: '📦 Compile specific packages (leave empty for all packages)'
        required: false
        default: ''
        type: string
        
      verbose:
        description: '🔍 Verbose logging level'
        required: false
        default: '0'
        type: choice
        options:
          - '0'
          - '1'
          - '2'
        
      without_pages:
        description: '🚫 Skip GitHub Pages deployment'
        required: false
        default: false
        type: boolean
        
permissions:
  contents: read
  pages: write
  id-token: write
  actions: write
  
env:
  DEBIAN_FRONTEND: noninteractive
  TZ: Asia/Jakarta
  
jobs: 
  prepare:
    name: 🔍 Prepare Build Matrix
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.packages.outputs.packages }}
      matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 📋 Read Package List
        if: inputs.compile_pkg == ''
        id: list_package
        run: |
          echo "::group::📋 Reading package list"
          pkg_names=()
          while IFS= read -r makefile; do
            pkg_name=$(grep -E '^PKG_NAME\s*:?=\s*' "$makefile" | head -n1 | sed -E 's/^PKG_NAME\s*:?=\s*//')
            if [ -n "$pkg_name" ]; then
              pkg_names+=("$pkg_name")
            fi
          done < <(find feeds -name Makefile)
          if [ ${#pkg_names[@]} -eq 0 ]; then
            echo "⚠️ No packages found in feeds"
            exit 1
          else
            echo "Found packages: ${pkg_names[*]}"
          fi
          echo "::endgroup::"
          echo "content=${pkg_names[*]}" >> $GITHUB_OUTPUT

      - name: 📦 Set Packages Output
        id: packages
        run: |
          if [ -n "${{ inputs.compile_pkg }}" ]; then
            echo "packages=${{ inputs.compile_pkg }}" >> $GITHUB_OUTPUT
          else
            echo "packages=${{ steps.list_package.outputs.content }}" >> $GITHUB_OUTPUT
          fi

      - name: 🏗️ Generate Build Matrix
        id: matrix
        run: |
          cat << 'EOF' > matrix.json
          {
            "include": [
              {"release": "master", "arch": "x86_64", "display": "SNAPSHOT x86_64"},
              {"release": "master", "arch": "mips_24kc", "display": "SNAPSHOT MIPS"},
              {"release": "master", "arch": "mipsel_24kc", "display": "SNAPSHOT MIPSEL"},
              {"release": "master", "arch": "arm_cortex-a7_neon-vfpv4", "display": "SNAPSHOT ARM Cortex-A7"},
              {"release": "master", "arch": "aarch64_cortex-a53", "display": "SNAPSHOT ARM64 A53"},
              {"release": "master", "arch": "aarch64_cortex-a72", "display": "SNAPSHOT ARM64 A72"},
              {"release": "master", "arch": "aarch64_generic", "display": "SNAPSHOT ARM64 Generic"},
              {"release": "24.10.2", "arch": "x86_64", "display": "24.10.2 x86_64"},
              {"release": "24.10.2", "arch": "mips_24kc", "display": "24.10.2 MIPS"},
              {"release": "24.10.2", "arch": "mipsel_24kc", "display": "24.10.2 MIPSEL"},
              {"release": "24.10.2", "arch": "arm_cortex-a7_neon-vfpv4", "display": "24.10.2 ARM Cortex-A7"},
              {"release": "24.10.2", "arch": "aarch64_cortex-a53", "display": "24.10.2 ARM64 A53"},
              {"release": "24.10.2", "arch": "aarch64_cortex-a72", "display": "24.10.2 ARM64 A72"},
              {"release": "24.10.2", "arch": "aarch64_generic", "display": "24.10.2 ARM64 Generic"},
              {"release": "23.05.5", "arch": "x86_64", "display": "23.05.5 x86_64"},
              {"release": "23.05.5", "arch": "mips_24kc", "display": "23.05.5 MIPS"},
              {"release": "23.05.5", "arch": "mipsel_24kc", "display": "23.05.5 MIPSEL"},
              {"release": "23.05.5", "arch": "arm_cortex-a7_neon-vfpv4", "display": "23.05.5 ARM Cortex-A7"},
              {"release": "23.05.5", "arch": "aarch64_cortex-a53", "display": "23.05.5 ARM64 A53"},
              {"release": "23.05.5", "arch": "aarch64_cortex-a72", "display": "23.05.5 ARM64 A72"},
              {"release": "23.05.5", "arch": "aarch64_generic", "display": "23.05.5 ARM64 Generic"}
            ]
          }
          EOF
          echo "matrix=$(cat matrix.json | jq -c .)" >> $GITHUB_OUTPUT

  build_ipk:
    name: 🔨 Build ${{ matrix.display }}
    needs: prepare
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
      
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 🗂️ Create Artifacts Directory
        run: |
          mkdir -p artifacts
          echo "Build started at $(date)" > artifacts/build.log
         
      - name: 📦 List Packages to Build
        run: |
          echo "::group::📋 Package Information"
          echo "Release: ${{ matrix.release }}"
          echo "Architecture: ${{ matrix.arch }}"
          echo "Packages: ${{ needs.prepare.outputs.packages }}"
          echo "::endgroup::"

      - name: 🛠️ Prepare Build KEY SIGN
        id: keysbuild
        run: |
          echo "::group::🔑 Preparing Build Key"
          keyusign=$(find "${{ github.workspace }}/keys/usign" -name '*.sec' | head -n1)
          keyapksign=$(find "${{ github.workspace }}/keys/apksign" -name '*.sec' | head -n1)
          if [ -f "$keyusign" ]; then
            echo "Found key: $keyusign"
            key_content=$(cat "$keyusign")
            echo "KEY_BUILD_USIGN=$key_content" >> "$GITHUB_OUTPUT"
          else
            echo "No signing key found!"
          fi
          if [ -f "$keyapksign" ]; then
            echo "Found key: $keyapksign"
            key_content=$(cat "$keyapksign")
            echo "KEY_BUILD_APKSIGN=$key_content" >> "$GITHUB_OUTPUT"
          else
            echo "No APK signing key found!"
          fi
          echo "::endgroup::"
        
      - name: 🏗️ Build OpenWrt Packages
        uses: openwrt/gh-action-sdk@main
        env:
          ARCH: ${{ matrix.arch }}-${{ matrix.release }}
          ARTIFACTS_DIR: ${{ github.workspace }}/artifacts
          FEED_DIR: ${{ github.workspace }}/feeds
          PACKAGES: ${{ needs.prepare.outputs.packages }}
          INDEX: 1
          V: ${{ inputs.verbose || '0' }}
          IGNORE_ERRORS: 1
          NO_REFRESH_CHECK: 1
          NO_SHFMT_CHECK: 1
          KEY_BUILD: ${{ steps.keysbuild.outputs.KEY_BUILD_USIGN }}
          PRIVATE_KEY: ${{ steps.keysbuild.outputs.KEY_BUILD_APKSIGN }}
        
      - name: 📊 Build Summary
        if: always()
        run: |
          echo "::group::📊 Build Results"
          if [ -d "artifacts/bin/packages/${{ matrix.arch }}" ]; then
            echo "✅ Build successful for ${{ matrix.arch }}-${{ matrix.release }}"
            echo "📦 Generated packages:"
            
            # Handle both .ipk (stable) and .apk (master) formats
            if [ "${{ matrix.release }}" = "master" ]; then
              find artifacts/bin/packages/${{ matrix.arch }} -name "*.apk" | head -20
              pkg_count=$(find artifacts/bin/packages/${{ matrix.arch }} -name "*.apk" | wc -l)
              echo "📈 Total APK packages built: $pkg_count"
            else
              find artifacts/bin/packages/${{ matrix.arch }} -name "*.ipk" | head -20
              pkg_count=$(find artifacts/bin/packages/${{ matrix.arch }} -name "*.ipk" | wc -l)
              echo "📈 Total IPK packages built: $pkg_count"
            fi
          else
            echo "❌ Build failed or no packages generated"
          fi
          echo "::endgroup::"
        
      - name: 📤 Upload Artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: openwrt_${{ matrix.release }}_${{ matrix.arch }}
          path: ${{ github.workspace }}/artifacts/bin/packages/${{ matrix.arch }}/*
          retention-days: 5
          compression-level: 6

  push_packages:
    name: 🚀 Deploy Packages
    needs: [prepare, build_ipk]
    if: always() && (needs.build_ipk.result == 'success' || needs.build_ipk.result == 'failure')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - name: 📥 Checkout Pages Branch
        uses: actions/checkout@v4
        with:
          ref: 'gh-pages'
          fetch-depth: 1
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 📦 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./downloads
        
      - name: 🗂️ Organize Release Structure
        shell: bash
        run: |
          echo "::group::🗂️ Creating Release Structure"
          
          # Create releases directory
          mkdir -p releases
          
          # Define versions and architectures
          declare -a versions=("master" "24.10.2" "23.05.5")
          declare -a archs=("x86_64" "mips_24kc" "mipsel_24kc" "arm_cortex-a7_neon-vfpv4" "aarch64_cortex-a53" "aarch64_cortex-a72" "aarch64_generic")
          
          # Process each version and architecture
          for version in "${versions[@]}"; do
            # Map master to SNAPSHOT, keep major.minor for stable versions
            if [ "$version" = "master" ]; then
              vers_short="SNAPSHOT"
              echo "📁 Processing version: $version -> $vers_short (OpenWrt Snapshot)"
            else
              vers_short=$(echo "$version" | sed 's/\.[^.]*$//')
              echo "📁 Processing version: $version -> $vers_short"
            fi
            
            # Determine package extension based on version
            if [ "$version" = "master" ]; then
              pkg_ext="apk"
              echo "  📦 Using APK format for snapshot branch"
            else
              pkg_ext="ipk"
              echo "  📦 Using IPK format for stable branch"
            fi
            
            for arch in "${archs[@]}"; do
              artifact_dir="downloads/openwrt_${version}_${arch}"
              target_dir="releases/${vers_short}/packages/${arch}"
              
              if [ -d "$artifact_dir" ]; then
                echo "  📦 Processing $arch..."
                rm -rf "$target_dir"
                mkdir -p "$target_dir"
                
                # Copy packages with correct extension, excluding routing and telephony
                find "$artifact_dir" -name "*.$pkg_ext" -not -path "*/routing/*" -not -path "*/telephony/*" \
                  -exec cp {} "$target_dir/" \; 2>/dev/null || true
                
                # Create package index if packages exist
                if [ "$(ls -A $target_dir 2>/dev/null)" ]; then
                  cd "$target_dir"
                  echo "Package: $(basename $target_dir)" > Packages
                  echo "Architecture: $arch" >> Packages
                  echo "Version: $version" >> Packages
                  echo "Branch: $([ "$version" = "master" ] && echo "SNAPSHOT" || echo "STABLE")" >> Packages
                  echo "Format: $pkg_ext" >> Packages
                  echo "Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> Packages
                  echo "" >> Packages
                  cd - > /dev/null
                  
                  pkg_count=$(ls -1 "$target_dir"/*.$pkg_ext 2>/dev/null | wc -l)
                  echo "    ✅ $pkg_count $pkg_ext packages copied"
                else
                  echo "    ⚠️  No packages found"
                fi
              fi
            done
          done
          
          # Cleanup downloads
          rm -rf downloads
          
          echo "::endgroup::"
          
      - name: 📊 Generate Repository Statistics
        run: |
          echo "::group::📊 Repository Statistics"
          
          # Create stats file
          cat > releases/stats.json << EOF
          {
            "generated": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "workflow_run": "${{ github.run_number }}",
            "commit": "${{ github.sha }}",
            "versions": {}
          }
          EOF
          
          # Count packages per version
          for version_dir in releases/*/; do
            if [ -d "$version_dir" ] && [ "$(basename $version_dir)" != "stats.json" ]; then
              version=$(basename "$version_dir")
              
              # Count both APK and IPK packages
              apk_count=$(find "$version_dir" -name "*.apk" 2>/dev/null | wc -l)
              ipk_count=$(find "$version_dir" -name "*.ipk" 2>/dev/null | wc -l)
              total_packages=$((apk_count + ipk_count))
              
              if [ "$version" = "SNAPSHOT" ]; then
                echo "📈 $version (master): $apk_count APK packages"
              elif [ $ipk_count -gt 0 ]; then
                echo "📈 $version: $ipk_count IPK packages"
              else
                echo "📈 $version: 0 packages"
              fi
            fi
          done
          
          echo "::endgroup::"
        
      - name: 📁 Display Repository Structure
        working-directory: releases
        run: |
          echo "::group::📁 Repository Structure"
          tree -L 3 2>/dev/null || find . -type d | head -20
          echo "::endgroup::"
        
      - name: 🚀 Commit and Push Changes
        run: |
          git config --local user.name "🤖 OpenWrt Bot"
          git config --local user.email "openwrt-bot@users.noreply.github.com"
          
          if git diff --quiet && git diff --staged --quiet; then
            echo "ℹ️ No changes to commit"
          else
            git add .
            git commit -m "            🚀 Update OpenWrt Packages
            
            📦 Workflow run: #${{ github.run_number }}
            🔨 Commit: ${{ github.sha }}
            ⏰ Updated: $(date -u +%Y-%m-%d %H:%M:%S) UTC
            📋 Packages: ${{ needs.prepare.outputs.packages }}
            🗂️ Structure: SNAPSHOT (APK) + 24.10/23.05 (IPK)"
            
            git push
            echo "✅ Changes pushed successfully"
          fi
          
  build_pages:
    name: 🌐 Build GitHub Pages
    needs: [prepare, push_packages]
    if: inputs.without_pages != true && !cancelled() && needs.push_packages.result == 'success'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
      
    steps:
      - name: 📥 Checkout Pages Branch
        uses: actions/checkout@v4
        with:
          ref: 'gh-pages'
          lfs: true
          submodules: true
          
      - name: 💎 Setup Ruby Environment
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
          cache-version: 1
          
      - name: 🔧 Pre-build Processing
        env:
          SERVER_HOME: releases
        run: |
          if [ -f "./prenodes.sh" ]; then
            chmod +x ./prenodes.sh
            ./prenodes.sh
          else
            echo "⚠️ prenodes.sh not found, skipping pre-processing"
          fi
        
      - name: ⚙️ Configure GitHub Pages
        id: pages
        uses: actions/configure-pages@v4
        
      - name: 🏗️ Build Jekyll Site
        run: |
          echo "::group::🏗️ Building Jekyll Site"
          bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}" --verbose
          echo "::endgroup::"
        env:
          JEKYLL_ENV: production
          
      - name: 📤 Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./_site
          
  deploy_pages:
    name: 🌐 Deploy to GitHub Pages
    needs: build_pages
    if: needs.build_pages.result == 'success'
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write
      
    steps:
      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  cleanup:
    name: 🧹 Cleanup Artifacts
    needs: [push_packages, deploy_pages]
    if: always()
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: read
      
    steps:
      - name: 🧹 Delete Old Workflow Runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          retain_days: 7
          keep_minimum_runs: 5
          delete_workflow_pattern: "AutoCompiler OpenWrt Packages"
          
      - name: 🗑️ Clean Build Artifacts
        uses: geekyeggo/delete-artifact@v4
        with:
          name: openwrt_*
          failOnError: false
          
      - name: 📊 Final Cleanup Summary
        run: |
          echo "::group::🧹 Cleanup Summary"
          echo "✅ Old workflow runs cleaned (kept last 5 runs)"
          echo "✅ Build artifacts removed"
          echo "✅ Packages organized:"
          echo "   📁 SNAPSHOT/ (APK packages from master)"
          echo "   📁 24.10/ (IPK packages from 24.10.x)"
          echo "   📁 23.05/ (IPK packages from 23.05.x)"
          echo "::endgroup::"

  notify:
    name: 📢 Notification
    needs: [prepare, build_ipk, push_packages, deploy_pages]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: 📊 Workflow Summary
        run: |
          echo "## 🚀 OpenWrt Package Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Step | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🔍 Prepare | ${{ needs.prepare.result == 'success' && '✅' || '❌' }} ${{ needs.prepare.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔨 Build IPK | ${{ needs.build_ipk.result == 'success' && '✅' || '❌' }} ${{ needs.build_ipk.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🚀 Push Packages | ${{ needs.push_packages.result == 'success' && '✅' || '❌' }} ${{ needs.push_packages.result }} |" >> $GITHUB_STEP_SUMMARY  
          echo "| 🌐 Deploy Pages | ${{ needs.deploy_pages.result == 'success' && '✅' || needs.deploy_pages.result == 'skipped' && '⏭️' || '❌' }} ${{ needs.deploy_pages.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**📦 Packages Built:** ${{ needs.prepare.outputs.packages }}" >> $GITHUB_STEP_SUMMARY
          echo "**⏰ Completed:** $(date -u +%Y-%m-%d\ %H:%M:%S) UTC" >> $GITHUB_STEP_SUMMARY