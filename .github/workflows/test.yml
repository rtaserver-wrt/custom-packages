#
# Copyright (C) 2024 nosignals
#
name: AutoCompiler OpenWrt Packages

on:
  workflow_run:
    workflows: ["Auto Sync App"]
    types:
      - completed

  push:
    branches:
      - main
    paths-ignore:
      - '.github/workflows/**'
      - 'README.md'
    
  workflow_dispatch:
    inputs:
      compile_pkg:
        description: 'Compile packages (default : all packages)'
        required: false
        default: ''
        type: string
        
      verbose:
        description: 'Verbose (default : 0)'
        required: false
        default: '0'
        type: string
        
      without_pages:
        description: 'Dont deploy pages'
        required: true
        default: false
        type: boolean
        
permissions:
  contents: read
  pages: write
  id-token: write
  
jobs: 
  build_ipk:
    permissions:
      contents: write
    name: AutoCompiler
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        release:
          - 23.05.5
          - 24.10.2
          - master
        arch:
          - x86_64
          - mips_24kc
          - mipsel_24kc
          - aarch64_cortex-a53
          - aarch64_cortex-a72
          - aarch64_generic
          
    steps:
      - name: Checkout Repository
        uses: actions/checkout@main
        with:
          ref: main

      - name: Reading Package 
        if: inputs.compile_pkg == ''
        id: list_package
        run: |
          find_packages() {
            local feed_dir="$1"
            if [ -d "$feed_dir" ]; then
              find -L "$feed_dir" -mindepth 1 -maxdepth 3 -type f -name "Makefile" \
                -exec dirname {} \; | while read dir; do
                if [ -f "$dir/Makefile" ]; then
                  basename "$dir"
                fi
              done | sort -u | tr '\n' ' '
            fi
          }

          packages=$(find_packages "$GITHUB_WORKSPACE/feeds")
          combined_packages=$(echo "$packages" | xargs -n1 | sort -u | xargs)
          echo "content=$combined_packages" >> $GITHUB_OUTPUT

      - name: List Compiled Packages
        run: echo "Compiled Packages | ${{ steps.list_package.outputs.content }} ${{ inputs.compile_pkg }}"
        
      - name: Creating Directory
        run: mkdir artifacts
         
      - name: Building Package
        uses: rtaserver-wrt/gh-action-sdk@main
        env:
          ARCH: ${{ matrix.arch }}-${{ matrix.release }}
          ARTIFACTS_DIR: ${{ github.workspace }}/artifacts
          FEED_DIR: ${{ github.workspace }}/feeds
          PACKAGES: ${{ steps.list_package.outputs.content}} ${{ inputs.compile_pkg }}
          INDEX: 1
          V: ${{ inputs.verbose }}
          FIXUP: 1
          NO_SHFMT_CHECK: 1
          NO_REFRESH_CHECK: 1
        
      - name: Delivering Package
        uses: actions/upload-artifact@main
        with:
          name: openwrt_${{ matrix.release }}_${{ matrix.arch }}
          path: ${{ github.workspace }}/artifacts/bin/packages/${{ matrix.arch }}/*

  push_packages:
    needs: build_ipk
    name: Push Packages 
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: 'gh-pages'
          lfs: false
          submodules: false
      
      - name: Download temporary artifact
        uses: actions/download-artifact@main
        
      - name: Moving artifact to releases
        shell: bash
        run: |
          # rm -rf releases/*
          mkdir -p releases 2>/dev/null
          version=( 23.05.5 24.10.2 master )
          archi=( x86_64 mips_24kc mipsel_24kc aarch64_cortex-a53 aarch64_cortex-a72 aarch64_generic )
          for vr in ${version[*]} 
            do
              if [ "$vr" == "master" ]; then
                vers="snapshot"
              else
                vers=$(echo $vr | sed 's/..$//')
              fi
              for arc in ${archi[*]} 
                do
                  rm -rf releases/$vers/packages/$arc
                  mkdir -p releases/$vers/packages/$arc
                  cp -rf openwrt_$vr\_$arc/* releases/$vers/packages/$arc
                  rm -rf releases/$vers/packages/$arc/routing releases/$vers/packages/$arc/telephony
                done
            done
          
          rm -rf openwrt_* 2>/dev/null
          
      - name: Display structure files
        working-directory: releases
        run: ls -R
        
      - name: Commit and push Packages
        env:
          Branch: gh-pages
        run: |
          git config --local user.name "GitHub Action"
          git config --local user.email "actions-user@users.noreply.github.com"
          git add .
          git commit -m "Update Packages"
          git push
          
  build_pages:
    needs: push_packages
    if: inputs.without_pages == 0 && !cancelled()
    name: Building pages
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: 'gh-pages'
          lfs: true
          submodules: true
          
      - name: Setup Ruby
        uses: ruby/setup-ruby@main
        with:
          ruby-version: '3.1'
          bundler-cache: true
          cache-version: 0 
          
      - name: prenodes
        env:
          SERVER_HOME: releases
        run: ./prenodes.sh
        
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@main
        
      - name: Build with Jekyll
        run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@main
        
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build_pages
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@main
        

  clear_artifact:
    needs: push_packages
    name: Clearing Artifact
    permissions:
      actions: write
      contents: read
    runs-on: ubuntu-latest
    steps:
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@main
        with:
          retain_days: 5
          keep_minimum_runs: 2