name: "Auto compile with openwrt sdk"
on:
  workflow_dispatch:
    inputs:
      compile_pkg:
        description: "Compile specific package, leave empty to compile all packages"
        required: false
        default: ''
      without_pages:
        description: "Skip deploy to GitHub Pages"
        required: false
        default: 'false'

env:
  TZ: Asia/Jakarta

jobs:
  job_auto_compile:
    runs-on: ubuntu-22.04
    name: build (${{ matrix.platform }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: x86_64
            url_sdk: https://downloads.openwrt.org/releases/24.10.1/targets/x86/64/openwrt-sdk-24.10.1-x86-64_gcc-13.3.0_musl.Linux-x86_64.tar.zst
            sdk_ver: "24.10"

          - platform: aarch64_generic
            url_sdk: https://downloads.openwrt.org/releases/24.10.1/targets/rockchip/armv8/openwrt-sdk-24.10.1-rockchip-armv8_gcc-13.3.0_musl.Linux-x86_64.tar.zst
            sdk_ver: "24.10"

          - platform: aarch64_cortex-a53
            url_sdk: https://downloads.openwrt.org/releases/24.10.1/targets/mvebu/cortexa53/openwrt-sdk-24.10.1-mvebu-cortexa53_gcc-13.3.0_musl.Linux-x86_64.tar.zst
            sdk_ver: "24.10"

          - platform: aarch64_cortex-a72
            url_sdk: https://downloads.openwrt.org/releases/24.10.1/targets/mvebu/cortexa72/openwrt-sdk-24.10.1-mvebu-cortexa72_gcc-13.3.0_musl.Linux-x86_64.tar.zst
            sdk_ver: "24.10"

          - platform: arm_cortex-a5_vfpv4
            url_sdk: https://downloads.openwrt.org/releases/24.10.1/targets/at91/sama5/openwrt-sdk-24.10.1-at91-sama5_gcc-13.3.0_musl_eabi.Linux-x86_64.tar.zst
            sdk_ver: "24.10"

          - platform: arm_cortex-a7
            url_sdk: https://downloads.openwrt.org/releases/24.10.1/targets/mediatek/mt7629/openwrt-sdk-24.10.1-mediatek-mt7629_gcc-13.3.0_musl_eabi.Linux-x86_64.tar.zst
            sdk_ver: "24.10"

          - platform: arm_cortex-a7_neon-vfpv4
            url_sdk: https://downloads.openwrt.org/releases/24.10.1/targets/sunxi/cortexa7/openwrt-sdk-24.10.1-sunxi-cortexa7_gcc-13.3.0_musl_eabi.Linux-x86_64.tar.zst
            sdk_ver: "24.10"

          - platform: arm_cortex-a8_vfpv3
            url_sdk: https://downloads.openwrt.org/releases/24.10.1/targets/sunxi/cortexa8/openwrt-sdk-24.10.1-sunxi-cortexa8_gcc-13.3.0_musl_eabi.Linux-x86_64.tar.zst
            sdk_ver: "24.10"

          - platform: arm_cortex-a9
            url_sdk: https://downloads.openwrt.org/releases/24.10.1/targets/bcm53xx/generic/openwrt-sdk-24.10.1-bcm53xx-generic_gcc-13.3.0_musl_eabi.Linux-x86_64.tar.zst
            sdk_ver: "24.10"

          - platform: arm_cortex-a9_neon
            url_sdk: https://downloads.openwrt.org/releases/24.10.1/targets/zynq/generic/openwrt-sdk-24.10.1-zynq-generic_gcc-13.3.0_musl_eabi.Linux-x86_64.tar.zst
            sdk_ver: "24.10"

          - platform: arm_cortex-a9_vfpv3-d16
            url_sdk: https://downloads.openwrt.org/releases/24.10.1/targets/mvebu/cortexa9/openwrt-sdk-24.10.1-mvebu-cortexa9_gcc-13.3.0_musl_eabi.Linux-x86_64.tar.zst
            sdk_ver: "24.10"

          - platform: arm_cortex-a15_neon-vfpv4
            url_sdk: https://downloads.openwrt.org/releases/24.10.1/targets/ipq806x/generic/openwrt-sdk-24.10.1-ipq806x-generic_gcc-13.3.0_musl_eabi.Linux-x86_64.tar.zst
            sdk_ver: "24.10"

          - platform: mips_24kc
            url_sdk: https://downloads.openwrt.org/releases/24.10.1/targets/ath79/generic/openwrt-sdk-24.10.1-ath79-generic_gcc-13.3.0_musl.Linux-x86_64.tar.zst
            sdk_ver: "24.10"

          - platform: mips_4kec
            url_sdk: https://downloads.openwrt.org/releases/24.10.1/targets/realtek/rtl838x/openwrt-sdk-24.10.1-realtek-rtl838x_gcc-13.3.0_musl.Linux-x86_64.tar.zst
            sdk_ver: "24.10"

          - platform: mips_mips32
            url_sdk: https://downloads.openwrt.org/releases/24.10.1/targets/bcm53xx/generic/openwrt-sdk-24.10.1-bcm53xx-generic_gcc-13.3.0_musl_eabi.Linux-x86_64.tar.zst
            sdk_ver: "24.10"

          - platform: mipsel_24kc
            url_sdk: https://downloads.openwrt.org/releases/24.10.1/targets/ramips/rt288x/openwrt-sdk-24.10.1-ramips-rt288x_gcc-13.3.0_musl.Linux-x86_64.tar.zst
            sdk_ver: "24.10"

          - platform: mipsel_74kc
            url_sdk: https://downloads.openwrt.org/releases/24.10.1/targets/ramips/rt3883/openwrt-sdk-24.10.1-ramips-rt3883_gcc-13.3.0_musl.Linux-x86_64.tar.zst
            sdk_ver: "24.10"

          - platform: mipsel_mips32
            url_sdk: https://downloads.openwrt.org/releases/24.10.1/targets/bcm47xx/generic/openwrt-sdk-24.10.1-bcm47xx-generic_gcc-13.3.0_musl.Linux-x86_64.tar.zst
            sdk_ver: "24.10"

    steps:
      - name: Initialization ${{ matrix.platform }} compile environment
        run: |
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          echo "install packages!!!!!!"
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev python3-distutils python3-setuptools rsync swig unzip zlib1g-dev file wget
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean

      - name: ${{ matrix.platform }} sdk download
        run: |
          wget ${{ matrix.url_sdk }}
          file_name=$(echo ${{matrix.url_sdk}} | awk -F/ '{print $NF}')
          mkdir sdk && tar --zstd -x -f $file_name -C ./sdk --strip-components=1
          cd sdk

      - name: ${{ matrix.platform }} feeds configuration packages
        run: |
          cd sdk
          echo "src-git base https://github.com/openwrt/openwrt.git;openwrt-${{ matrix.sdk_ver }}" > feeds.conf
          echo "src-git packages https://github.com/openwrt/packages.git;openwrt-${{ matrix.sdk_ver }}" >> feeds.conf
          echo "src-git luci https://github.com/openwrt/luci.git;openwrt-${{ matrix.sdk_ver }}" >> feeds.conf
          echo "src-git routing https://git.openwrt.org/feed/routing.git;openwrt-${{ matrix.sdk_ver }}"  >> feeds.conf
          echo "src-link custom $GITHUB_WORKSPACE/feeds" >> feeds.conf

          ./scripts/feeds update -a
          ./scripts/feeds install -a -f -p custom

          rm -rf feeds/packages/lang/golang
          git clone https://github.com/sbwml/packages_lang_golang -b 24.x feeds/packages/lang/golang

          echo "CONFIG_ALL_NONSHARED=n" > .config
          echo "CONFIG_ALL_KMODS=n" >> .config
          echo "CONFIG_ALL=n" >> .config
          echo "CONFIG_AUTOREMOVE=n" >> .config
          echo "CONFIG_SIGNED_PACKAGES=n" >> .config

          make defconfig


      - name: ${{ matrix.platform }} download
        run: |
          cd sdk
          make download -j8
          find dl -size -1024c -exec ls -l {} \;

      - name: 📋 Read Package List from Feeds
        if: ${{ inputs.compile_pkg == '' }}
        id: list_package
        run: |
          echo "::group::📋 Reading package list"
          find_packages() {
            local feed_dir="$1"
            if [ -d "$feed_dir" ]; then
              find -L "$feed_dir" -mindepth 1 -maxdepth 2 -type f -name "Makefile" -exec dirname {} \; | xargs -n1 basename | tr '\n' ' '
            fi
          }
          
          packages=$(find_packages "$GITHUB_WORKSPACE/feeds")
          
          echo "📦 Found packages: ${packages:-None}"

          if [ ${{ inputs.compile_pkg }} != '' ]; then
            combined_packages=$(echo "$packages" | xargs -n1 | sort -u | xargs)
          else
            combined_packages="${{ inputs.compile_pkg }}"
          fi

          echo "✨ Combined unique packages: $combined_packages"
          echo "::endgroup::"
          echo "content=$combined_packages" >> $GITHUB_OUTPUT

      - name: ${{ matrix.platform }} compile
        id: compile
        run: |
          cd sdk
          for package in ${{ steps.list_package.outputs.content }}; do
              if [ -d "feeds/custom/$package" ]; then
                  echo "-----------begin compile $package ---------------"
                  sleep 10s
                  make package/feeds/custom/$package/compile -j$(nproc) V=s
                  echo "-----------compiled $package ---------------"
                  echo ""
              fi
          done

          echo "status=success" >> $GITHUB_OUTPUT

      - name: Organize ${{ matrix.platform }} files
        id: organize
        if: steps.compile.outputs.status == 'success'
        run: |
          cd sdk
          mkdir releases/${{ matrix.sdk_ver }}/${{ matrix.platform }}/packages
          cp -r bin/packages/*/custom/*.ipk releases/${{ matrix.sdk_ver }}/${{ matrix.platform }}/packages/
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload ${{ matrix.platform }} packages
        use: actions/upload-artifact@v4
        with:
          name: openwrt-packages-${{ matrix.sdk_ver }}-${{ matrix.platform }}
          path: sdk/releases/${{ matrix.sdk_ver }}/${{ matrix.platform }}/packages

  push_packages:
    needs: job_auto_compile
    if: success() || failure()
    name: 🚀 Push Packages to gh-pages
    permissions:
      contents: write
    runs-on: ubuntu-22.04
    steps:
      - name: 🚀 Checkout gh-pages Branch
        uses: actions/checkout@v4
        with:
          ref: 'gh-pages'

      - name: 📥 Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: 📂 Organize Packages
        run: |
          echo "::group::Sorting packages into release directories"
          for dir in ./artifacts/openwrt-packages-*; do
            if [ -d "$dir" ]; then
              mv $dir/* "./" 2>/dev/null || true
            fi
          done
          echo "::endgroup::"
          
          echo "::group::Final repository structure"
          ls -R releases 2>/dev/null || true
          echo "::endgroup::"
          
          rm -rf ./artifacts

      - name: 💾 Commit and Push Changes
        run: |
          git config --local user.name "GitHub Action"
          git config --local user.email "actions-user@users.noreply.github.com"
          git add releases
          if ! git diff --staged --quiet; then
            git commit -m "🚀 Update Packages - $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            git push
          else
            echo "✅ No new packages to commit."
          fi

  build_and_deploy_pages:
    needs: push_packages
    if: inputs.without_pages == false && (success() || failure())
    name: 🌐 Deploy to GitHub Pages
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-22.04
    steps:
      - name: 🚀 Checkout gh-pages Branch
        uses: actions/checkout@v4
        with:
          ref: 'gh-pages'
          submodules: true

      - name: 💎 Setup Ruby and Jekyll
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true

      - name: 📜 Run Pre-build Script
        env:
          SERVER_HOME: releases
        run: |
          if [ -f "./prenodes.sh" ]; then
            echo "Running prenodes.sh..."
            chmod +x ./prenodes.sh
            ./prenodes.sh
          else
            echo "prenodes.sh not found, skipping."
          fi

      - name: 🛠️ Configure GitHub Pages
        id: pages
        uses: actions/configure-pages@v5

      - name: 🏗️ Build with Jekyll
        run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production

      - name: 📤 Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3

      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4