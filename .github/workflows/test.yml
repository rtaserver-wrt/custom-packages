name: "Auto compile with openwrt sdk"
on:
  workflow_dispatch:
    inputs:
      compile_pkg:
        description: "Compile specific package, leave empty to compile all packages"
        required: false
        default: ''
      without_pages:
        description: "Skip deploy to GitHub Pages"
        type: choice
        required: false
        default: 'false'
        options:
          - 'true'
          - 'false'

env:
  TZ: Asia/Jakarta

jobs:
  job_auto_compile:
    runs-on: ubuntu-22.04
    name: build (${{ matrix.platform }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: x86_64
            url_sdk: https://downloads.openwrt.org/releases/24.10.1/targets/x86/64/openwrt-sdk-24.10.1-x86-64_gcc-13.3.0_musl.Linux-x86_64.tar.zst
            sdk_ver: "24.10"

          - platform: aarch64_generic
            url_sdk: https://downloads.openwrt.org/releases/24.10.1/targets/rockchip/armv8/openwrt-sdk-24.10.1-rockchip-armv8_gcc-13.3.0_musl.Linux-x86_64.tar.zst
            sdk_ver: "24.10"

          - platform: aarch64_cortex-a53
            url_sdk: https://downloads.openwrt.org/releases/24.10.1/targets/mvebu/cortexa53/openwrt-sdk-24.10.1-mvebu-cortexa53_gcc-13.3.0_musl.Linux-x86_64.tar.zst
            sdk_ver: "24.10"

          - platform: aarch64_cortex-a72
            url_sdk: https://downloads.openwrt.org/releases/24.10.1/targets/mvebu/cortexa72/openwrt-sdk-24.10.1-mvebu-cortexa72_gcc-13.3.0_musl.Linux-x86_64.tar.zst
            sdk_ver: "24.10"

          - platform: arm_cortex-a5_vfpv4
            url_sdk: https://downloads.openwrt.org/releases/24.10.1/targets/at91/sama5/openwrt-sdk-24.10.1-at91-sama5_gcc-13.3.0_musl_eabi.Linux-x86_64.tar.zst
            sdk_ver: "24.10"

          - platform: arm_cortex-a7
            url_sdk: https://downloads.openwrt.org/releases/24.10.1/targets/mediatek/mt7629/openwrt-sdk-24.10.1-mediatek-mt7629_gcc-13.3.0_musl_eabi.Linux-x86_64.tar.zst
            sdk_ver: "24.10"

          - platform: arm_cortex-a7_neon-vfpv4
            url_sdk: https://downloads.openwrt.org/releases/24.10.1/targets/sunxi/cortexa7/openwrt-sdk-24.10.1-sunxi-cortexa7_gcc-13.3.0_musl_eabi.Linux-x86_64.tar.zst
            sdk_ver: "24.10"

          - platform: arm_cortex-a8_vfpv3
            url_sdk: https://downloads.openwrt.org/releases/24.10.1/targets/sunxi/cortexa8/openwrt-sdk-24.10.1-sunxi-cortexa8_gcc-13.3.0_musl_eabi.Linux-x86_64.tar.zst
            sdk_ver: "24.10"

          - platform: arm_cortex-a9
            url_sdk: https://downloads.openwrt.org/releases/24.10.1/targets/bcm53xx/generic/openwrt-sdk-24.10.1-bcm53xx-generic_gcc-13.3.0_musl_eabi.Linux-x86_64.tar.zst
            sdk_ver: "24.10"

          - platform: arm_cortex-a9_neon
            url_sdk: https://downloads.openwrt.org/releases/24.10.1/targets/zynq/generic/openwrt-sdk-24.10.1-zynq-generic_gcc-13.3.0_musl_eabi.Linux-x86_64.tar.zst
            sdk_ver: "24.10"

          - platform: arm_cortex-a9_vfpv3-d16
            url_sdk: https://downloads.openwrt.org/releases/24.10.1/targets/mvebu/cortexa9/openwrt-sdk-24.10.1-mvebu-cortexa9_gcc-13.3.0_musl_eabi.Linux-x86_64.tar.zst
            sdk_ver: "24.10"

          - platform: arm_cortex-a15_neon-vfpv4
            url_sdk: https://downloads.openwrt.org/releases/24.10.1/targets/ipq806x/generic/openwrt-sdk-24.10.1-ipq806x-generic_gcc-13.3.0_musl_eabi.Linux-x86_64.tar.zst
            sdk_ver: "24.10"

          - platform: mips_24kc
            url_sdk: https://downloads.openwrt.org/releases/24.10.1/targets/ath79/generic/openwrt-sdk-24.10.1-ath79-generic_gcc-13.3.0_musl.Linux-x86_64.tar.zst
            sdk_ver: "24.10"

          - platform: mips_4kec
            url_sdk: https://downloads.openwrt.org/releases/24.10.1/targets/realtek/rtl838x/openwrt-sdk-24.10.1-realtek-rtl838x_gcc-13.3.0_musl.Linux-x86_64.tar.zst
            sdk_ver: "24.10"

          - platform: mips_mips32
            url_sdk: https://downloads.openwrt.org/releases/24.10.1/targets/bcm53xx/generic/openwrt-sdk-24.10.1-bcm53xx-generic_gcc-13.3.0_musl_eabi.Linux-x86_64.tar.zst
            sdk_ver: "24.10"

          - platform: mipsel_24kc
            url_sdk: https://downloads.openwrt.org/releases/24.10.1/targets/ramips/rt288x/openwrt-sdk-24.10.1-ramips-rt288x_gcc-13.3.0_musl.Linux-x86_64.tar.zst
            sdk_ver: "24.10"

          - platform: mipsel_74kc
            url_sdk: https://downloads.openwrt.org/releases/24.10.1/targets/ramips/rt3883/openwrt-sdk-24.10.1-ramips-rt3883_gcc-13.3.0_musl.Linux-x86_64.tar.zst
            sdk_ver: "24.10"

          - platform: mipsel_mips32
            url_sdk: https://downloads.openwrt.org/releases/24.10.1/targets/bcm47xx/generic/openwrt-sdk-24.10.1-bcm47xx-generic_gcc-13.3.0_musl.Linux-x86_64.tar.zst
            sdk_ver: "24.10"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Initialization ${{ matrix.platform }} compile environment
        run: |
          # Clean up space and install required packages
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          echo "Installing build dependencies..."
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev python3-distutils python3-setuptools rsync swig unzip zlib1g-dev file wget
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean

      - name: Cache SDK
        id: cache-sdk
        uses: actions/cache@v4
        with:
          path: sdk
          key: ${{ runner.os }}-sdk-${{ matrix.platform }}-${{ matrix.url_sdk }}
          restore-keys: |
            ${{ runner.os }}-sdk-${{ matrix.platform }}-
      
      - name: ${{ matrix.platform }} sdk download
        run: |
          if [ -d "sdk" ] && [ -f "sdk/scripts/feeds" ]; then
            echo "SDK already cached, skipping download and extraction."
            exit 0
          fi
          # Download and extract SDK with proper error handling
          echo "Downloading SDK from: ${{ matrix.url_sdk }}"
          wget -q --retry-connrefused --waitretry=3 --read-timeout=20 --timeout=15 -t 3 "${{ matrix.url_sdk }}"
          
          file_name=$(basename "${{ matrix.url_sdk }}")
          echo "Downloaded file: $file_name"
          
          # Verify download was successful
          if [ ! -f "$file_name" ] || [ ! -s "$file_name" ]; then
            echo "Error: SDK download failed or file is empty"
            exit 1
          fi
          
          # Create SDK directory and extract
          mkdir -p sdk
          echo "Extracting SDK..."
          tar --zstd -xf "$file_name" -C ./sdk --strip-components=1
          
          # Verify extraction was successful
          if [ ! -d "sdk" ] || [ ! -f "sdk/scripts/feeds" ]; then
            echo "Error: SDK extraction failed"
            exit 1
          fi
          
          echo "SDK extraction completed successfully"

      - name: ${{ matrix.platform }} feeds configuration packages
        run: |
          cd sdk
          
          # Ensure feeds directory exists in workspace (create if missing)
          mkdir -p "$GITHUB_WORKSPACE/feeds"
          
          # Configure feeds with error checking
          echo "Configuring feeds..."
          cat > feeds.conf << EOF
          src-git base https://github.com/openwrt/openwrt.git;openwrt-${{ matrix.sdk_ver }}
          src-git packages https://github.com/openwrt/packages.git;openwrt-${{ matrix.sdk_ver }}
          src-git luci https://github.com/openwrt/luci.git;openwrt-${{ matrix.sdk_ver }}
          src-git routing https://git.openwrt.org/feed/routing.git;openwrt-${{ matrix.sdk_ver }}
          src-link custom $GITHUB_WORKSPACE/feeds
          EOF
          
          echo "Updating feeds..."
          ./scripts/feeds update -a || { echo "Error: Feeds update failed"; exit 1; }
          
          echo "Installing custom feed packages..."
          ./scripts/feeds install -a -f -p custom || echo "Warning: Some custom packages may not have installed correctly"

          # Update golang feed with error handling
          echo "Updating golang feed..."
          if [ -d "feeds/packages/lang/golang" ]; then
            rm -rf feeds/packages/lang/golang
          fi
          
          git clone https://github.com/sbwml/packages_lang_golang -b 24.x feeds/packages/lang/golang || {
            echo "Warning: Failed to clone golang feed, continuing with default"
          }

          # Configure build options
          echo "Configuring build options..."
          cat > .config << EOF
          CONFIG_ALL_NONSHARED=n
          CONFIG_ALL_KMODS=n
          CONFIG_ALL=n
          CONFIG_AUTOREMOVE=n
          CONFIG_SIGNED_PACKAGES=n
          EOF

          echo "Running defconfig..."
          make defconfig || { echo "Error: defconfig failed"; exit 1; }

      - name: ${{ matrix.platform }} download
        run: |
          cd sdk
          echo "Downloading package sources..."
          make download -j8 || { echo "Warning: Some downloads may have failed"; }
          
          # Check for failed downloads
          echo "Checking for failed downloads..."
          find dl -size -1024c -exec ls -l {} \; || true

      - name: 📋 Read Package List from Feeds
        if: ${{ inputs.compile_pkg == '' }}
        id: list_package
        run: |
          echo "::group::📋 Reading package list"
          
          # Function to find packages in feed directory
          find_packages() {
            local feed_dir="$1"
            if [ -d "$feed_dir" ]; then
              # Find all Makefile files in package directories
              find -L "$feed_dir" -mindepth 1 -maxdepth 3 -name "Makefile" -type f | while read makefile; do
                # Get the package directory name
                pkg_dir=$(dirname "$makefile")
                pkg_name=$(basename "$pkg_dir")
                
                # Verify this is actually a package Makefile
                if grep -q "include.*package.mk\|include.*kernel.mk" "$makefile" 2>/dev/null; then
                  echo "$pkg_name"
                fi
              done | sort -u | tr '\n' ' '
            fi
          }
          
          # Find packages in the feeds directory
          packages=$(find_packages "$GITHUB_WORKSPACE/feeds")
          
          echo "📦 Found packages: ${packages:-None}"

          # Determine final package list
          if [ "${{ inputs.compile_pkg }}" = '' ]; then
            # Remove duplicates and empty entries
            combined_packages=$(echo "$packages" | tr ' ' '\n' | grep -v '^$' | sort -u | tr '\n' ' ' | sed 's/[[:space:]]*$//')
          else
            combined_packages="${{ inputs.compile_pkg }}"
          fi

          echo "✨ Final package list: $combined_packages"
          echo "::endgroup::"
          
          # Set output with fallback for empty list
          if [ -n "$combined_packages" ]; then
            echo "content=$combined_packages" >> $GITHUB_OUTPUT
          else
            echo "content=" >> $GITHUB_OUTPUT
            echo "Warning: No packages found to compile"
          fi

      - name: ${{ matrix.platform }} compile
        id: compile
        run: |
          cd sdk
          
          # Get package list (either from previous step or input)
          if [ "${{ inputs.compile_pkg }}" != '' ]; then
            packages="${{ inputs.compile_pkg }}"
          else
            packages="${{ steps.list_package.outputs.content }}"
          fi
          
          echo "Packages to compile: $packages"
          
          if [ -z "$packages" ]; then
            echo "Warning: No packages specified for compilation"
            echo "status=success" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Compile each package with error handling
          failed_packages=""
          successful_packages=""
          
          for package in $packages; do
            if [ -d "feeds/custom/$package" ]; then
              echo "=========== Begin compiling $package ==========="
              sleep 2  # Brief pause to avoid overwhelming the system
              
              if make package/feeds/custom/$package/compile -j$(nproc) V=s; then
                echo "✅ Successfully compiled $package"
                successful_packages="$successful_packages $package"
              else
                echo "❌ Failed to compile $package"
                failed_packages="$failed_packages $package"
              fi
              
              echo "=========== Finished compiling $package ==========="
              echo ""
            else
              echo "⚠️  Package directory not found: feeds/custom/$package"
              failed_packages="$failed_packages $package"
            fi
          done
          
          # Report compilation results
          if [ -n "$successful_packages" ]; then
            echo "✅ Successfully compiled packages:$successful_packages"
          fi
          
          if [ -n "$failed_packages" ]; then
            echo "❌ Failed to compile packages:$failed_packages"
            echo "Note: Continuing with successful packages..."
          fi

          echo "status=success" >> $GITHUB_OUTPUT

      - name: Clean ${{ matrix.platform }} custom package
        run: |
          cd sdk
          # Clean all custom packages before compile to force rebuild and .ipk generation
          if [ "${{ inputs.compile_pkg }}" != '' ]; then
            packages="${{ inputs.compile_pkg }}"
          else
            packages="${{ steps.list_package.outputs.content }}"
          fi
          for package in $packages; do
            if [ -d "feeds/custom/$package" ]; then
              make package/feeds/custom/$package/clean || true
            fi
          done

      - name: Organize ${{ matrix.platform }} files
        id: organize
        if: steps.compile.outputs.status == 'success'
        run: |
          cd sdk
          
          # Create directory structure
          mkdir -p "releases/${{ matrix.sdk_ver }}/${{ matrix.platform }}/packages"

          ls -R ./ || true
          
          # Cari semua file .ipk dari feed custom di seluruh bin/
          ipk_found=$(find bin/ -type f -name "*.ipk" -path "*/custom/*" | wc -l)
          if [ "$ipk_found" -gt 0 ]; then
            find bin/ -type f -name "*.ipk" -path "*/custom/*" -exec cp {} "releases/${{ matrix.sdk_ver }}/${{ matrix.platform }}/packages/" \; 2>/dev/null || true
            package_count=$(find "releases/${{ matrix.sdk_ver }}/${{ matrix.platform }}/packages" -name "*.ipk" | wc -l)
            echo "📦 Organized $package_count package(s)"
            if [ "$package_count" -eq 0 ]; then
              echo "⚠️  Warning: No compiled packages found to organize"
            fi
          else
            echo "⚠️  Warning: No custom .ipk packages found in bin/"
          fi
          
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload ${{ matrix.platform }} packages
        uses: actions/upload-artifact@v4
        if: steps.organize.outputs.status == 'success'
        with:
          name: openwrt-packages-${{ matrix.sdk_ver }}-${{ matrix.platform }}
          path: sdk/releases/${{ matrix.sdk_ver }}/${{ matrix.platform }}/packages
          if-no-files-found: warn

  push_packages:
    needs: job_auto_compile
    if: success() || failure()
    name: 🚀 Push Packages to gh-pages
    permissions:
      contents: write
    runs-on: ubuntu-22.04
    steps:
      - name: 🚀 Checkout gh-pages Branch
        uses: actions/checkout@v4
        with:
          ref: 'gh-pages'

      - name: 📥 Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: 📂 Organize Packages
        run: |
          echo "::group::Sorting packages into release directories"
          
          # Ensure releases directory exists
          mkdir -p releases
          
          # Process each artifact directory
          for dir in ./artifacts/openwrt-packages-*; do
            if [ -d "$dir" ]; then
              echo "Processing artifact directory: $dir"
              
              # Move contents to root, preserving directory structure
              find "$dir" -type f -name "*.ipk" | while read file; do
                # Extract relative path from artifact directory
                rel_path=${file#./artifacts/openwrt-packages-*/}
                target_dir=$(dirname "$rel_path")
                
                # Create target directory if it doesn't exist
                if [ "$target_dir" != "." ]; then
                  mkdir -p "$target_dir"
                fi
                
                # Move file to target location
                cp "$file" "$rel_path" 2>/dev/null || true
              done
              
              # Also handle direct structure
              if [ -d "$dir/releases" ]; then
                cp -r "$dir/releases"/* "./releases/" 2>/dev/null || true
              elif find "$dir" -name "*.ipk" -type f | head -1 >/dev/null 2>&1; then
                # If there are .ipk files directly in the artifact
                find "$dir" -name "*.ipk" -exec cp {} "./releases/" \; 2>/dev/null || true
              fi
            fi
          done
          
          echo "::endgroup::"
          
          echo "::group::Final repository structure"
          if [ -d "releases" ]; then
            find releases -type f -name "*.ipk" | head -20  # Show first 20 files
            total_packages=$(find releases -name "*.ipk" | wc -l)
            echo "Total packages: $total_packages"
          else
            echo "No releases directory found"
          fi
          echo "::endgroup::"
          
          # Clean up artifacts directory
          rm -rf ./artifacts

      - name: 💾 Commit and Push Changes
        run: |
          git config --local user.name "GitHub Action"
          git config --local user.email "actions-user@users.noreply.github.com"
          
          # Add all changes
          git add .
          
          # Check if there are changes to commit
          if ! git diff --staged --quiet; then
            commit_msg="🚀 Update Packages - $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            
            # Count new packages
            if [ -d "releases" ]; then
              package_count=$(find releases -name "*.ipk" | wc -l)
              commit_msg="$commit_msg ($package_count packages)"
            fi
            
            git commit -m "$commit_msg"
            git push
            echo "✅ Successfully pushed $package_count packages"
          else
            echo "✅ No new packages to commit."
          fi

  build_and_deploy_pages:
    needs: push_packages
    if: inputs.without_pages == 'false' && (success() || failure())
    name: 🌐 Deploy to GitHub Pages
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-22.04
    steps:
      - name: 🚀 Checkout gh-pages Branch
        uses: actions/checkout@v4
        with:
          ref: 'gh-pages'
          submodules: true

      - name: 💎 Setup Ruby and Jekyll
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true

      - name: 📜 Run Pre-build Script
        env:
          SERVER_HOME: releases
        run: |
          if [ -f "./prenodes.sh" ]; then
            echo "Running prenodes.sh..."
            chmod +x ./prenodes.sh
            ./prenodes.sh
          else
            echo "prenodes.sh not found, skipping."
          fi

      - name: 🛠️ Configure GitHub Pages
        id: pages
        uses: actions/configure-pages@v5

      - name: 🏗️ Build with Jekyll
        run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production

      - name: 📤 Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3

      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4