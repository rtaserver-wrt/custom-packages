# Copyright (C) 2025 rtaserver-wrt
#
name: AutoCompiler OpenWrt Packages

on:
  workflow_run:
    workflows: ["Auto Sync App"]
    types:
      - completed

  push:
    branches:
      - main
    paths-ignore:
      - '.github/workflows/**'
      - 'README.md'

  workflow_dispatch:
    inputs:
      release:
        description: 'Build for a specific release. Leave empty to build for all.'
        required: false
        default: ''
        type: choice
        options:
          - ''
          - 'SNAPSHOT'
          - '24.10.2'
          - '23.05.5'
      arch:
        description: 'Build for a specific arch (e.g., x86_64, aarch64_cortex-a53). Leave empty to build for all.'
        required: false
        default: ''
        type: string
      compile_pkg:
        description: 'Compile specific packages (space-separated). Default: all in feeds.'
        required: false
        default: ''
        type: string
      verbose:
        description: 'Verbose build output'
        required: false
        default: '0'
        type: choice
        options:
          - '0' # No verbose
          - '1' # V=s
          - '2' # V=sc
      without_pages:
        description: 'Do not build and deploy GitHub Pages'
        required: true
        default: false
        type: boolean

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: auto-compiler-${{ github.ref }}
  cancel-in-progress: true

env:
  TZ: Asia/Jakarta

jobs:
  build_ipk:
    permissions:
      contents: write
    name: 🏗️ Build Packages [${{ matrix.release }}-${{ matrix.arch }}]
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        release: ${{ fromJSON(inputs.release && format('["{0}"]', inputs.release) || '["SNAPSHOT", "24.10.2", "23.05.5"]') }}
        arch: ${{ fromJSON(inputs.arch && format('["{0}"]', inputs.arch) || '["x86_64", "mips_24kc", "mipsel_24kc", "arm_cortex-a7_neon-vfpv4", "aarch64_cortex-a53", "aarch64_cortex-a72", "aarch64_generic"]') }}

    env:
      SDK_CACHE_DIR: ${{ github.workspace }}/sdk_cache

    steps:
      - name: 🚀 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🛠️ Install System Dependencies
        run: |
          echo "::group::🔧 Cleaning system and installing dependencies"
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install build-essential clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
            python3-distutils python3-setuptools rsync swig unzip zlib1g-dev \
            file wget zstd python3-pyelftools curl jq
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          echo "::endgroup::"

      - name: ⚙️ Prepare SDK Environment
        run: |
          echo "::group::📂 Setting up SDK Cache Directory"
          mkdir -p $SDK_CACHE_DIR
          chmod 777 $SDK_CACHE_DIR
          echo "SDK Cache Directory: $SDK_CACHE_DIR"
          echo "::endgroup::"

      - name: 📦 Cache OpenWrt SDK
        id: cache-sdk
        uses: actions/cache@v4
        with:
          path: ${{ env.SDK_CACHE_DIR }}/openwrt-sdk
          key: sdk-${{ runner.os }}-${{ matrix.release }}-${{ matrix.arch }}-v3

      - name: 📥 Download and Setup OpenWrt SDK
        if: steps.cache-sdk.outputs.cache-hit != 'true'
        run: |
          RELEASE="${{ matrix.release }}"
          ARCH="${{ matrix.arch }}"
          
          echo "::group::⚙️ SDK Configuration for Release: $RELEASE, Arch: $ARCH"
          
          # Configure SDK parameters based on release
          if [[ "$RELEASE" == "SNAPSHOT" ]]; then
            URL_PATH="snapshots/targets"
            GCC_VERSION="14.3.0"
            FILE_EXT="tar.zst"
            echo "📦 Using SNAPSHOT build"
          elif [[ "$RELEASE" == "24.10.2" ]]; then
            URL_PATH="releases/24.10.2/targets"
            GCC_VERSION="13.3.0"
            FILE_EXT="tar.zst"
            echo "📦 Using stable release 24.10.2"
          elif [[ "$RELEASE" == "23.05.5" ]]; then
            URL_PATH="releases/23.05.5/targets"
            GCC_VERSION="12.3.0"
            FILE_EXT="tar.xz"
            echo "📦 Using stable release 23.05.5"
          fi
          
          # Map architecture to target
          case "$ARCH" in
            "x86_64") TARGET="x86/64" ;;
            "mips_24kc") TARGET="ath79/generic" ;;
            "mipsel_24kc") TARGET="ramips/mt7621" ;;
            "arm_cortex-a7_neon-vfpv4") TARGET="bcm27xx/bcm2709" ;;
            "aarch64_cortex-a53") TARGET="bcm27xx/bcm2710" ;;
            "aarch64_cortex-a72") TARGET="bcm27xx/bcm2711" ;;
            "aarch64_generic") TARGET="rockchip/armv8" ;;
            *) echo "Unsupported architecture: $ARCH"; exit 1 ;;
          esac
          
          SDK_FLAVOR=$(echo $TARGET | tr '/' '-')
          SDK_SUFFIX_EABI=$(if [[ "$ARCH" =~ arm_cortex ]]; then echo "_eabi"; fi)
          
          if [[ "$RELEASE" == "SNAPSHOT" ]]; then
            SDK_NAME="openwrt-sdk-${SDK_FLAVOR}_gcc-${GCC_VERSION}_musl${SDK_SUFFIX_EABI}.Linux-x86_64"
          else
            SDK_NAME="openwrt-sdk-${RELEASE}-${SDK_FLAVOR}_gcc-${GCC_VERSION}_musl${SDK_SUFFIX_EABI}.Linux-x86_64"
          fi
          
          SDK_URL="https://downloads.openwrt.org/${URL_PATH}/${TARGET}/${SDK_NAME}.${FILE_EXT}"
          echo "SDK URL: $SDK_URL"
          echo "::endgroup::"
          
          echo "::group::📥 Downloading SDK"
          # Retry logic with exponential backoff
          for i in {1..5}; do
            if wget -q --timeout=60 --tries=1 "$SDK_URL" -O "$SDK_CACHE_DIR/sdk.${FILE_EXT}"; then
              echo "✅ SDK downloaded successfully on attempt $i"
              break
            else
              if [ $i -eq 5 ]; then
                echo "❌ Failed to download SDK after 5 attempts"
                exit 1
              fi
              echo "⚠️ Download attempt $i failed, retrying in $((i * 10)) seconds..."
              sleep $((i * 10))
            fi
          done
          echo "::endgroup::"
          
          echo "::group::📦 Extracting SDK"
          mkdir -p "$SDK_CACHE_DIR/openwrt-sdk"
          if [[ "$FILE_EXT" == "tar.zst" ]]; then
            if ! tar --use-compress-program=zstd -xf "$SDK_CACHE_DIR/sdk.${FILE_EXT}" --strip-components=1 -C "$SDK_CACHE_DIR/openwrt-sdk"; then
              echo "❌ Failed to extract SDK"
              exit 1
            fi
          else
            if ! tar -xf "$SDK_CACHE_DIR/sdk.${FILE_EXT}" --strip-components=1 -C "$SDK_CACHE_DIR/openwrt-sdk"; then
              echo "❌ Failed to extract SDK"
              exit 1
            fi
          fi
          rm "$SDK_CACHE_DIR/sdk.${FILE_EXT}"
          echo "✅ SDK extracted to $SDK_CACHE_DIR/openwrt-sdk"
          echo "::endgroup::"

      - name: 📦 Cache OpenWrt dl Directory
        id: cache-dl
        uses: actions/cache@v4
        with:
          path: ${{ env.SDK_CACHE_DIR }}/openwrt-sdk/dl
          key: dl-${{ runner.os }}-${{ matrix.release }}-${{ matrix.arch }}-v3

      - name: 🛠️ Setup SDK Feeds and Configuration
        run: |
          cd ${{ env.SDK_CACHE_DIR }}/openwrt-sdk
          
          echo "::group::📜 Configuring Feeds"
          # Setup feeds configuration
          if [[ "${{ matrix.release }}" == "SNAPSHOT" ]]; then
            SDK_VER="main"
          elif [[ "${{ matrix.release }}" == "24.10.2" ]]; then
            SDK_VER="openwrt-24.10"
          elif [[ "${{ matrix.release }}" == "23.05.5" ]]; then
            SDK_VER="openwrt-23.05"
          fi
          
          # Create feeds.conf with proper feeds
          cat > feeds.conf << EOF
          src-git base https://github.com/openwrt/openwrt.git;${SDK_VER}
          src-git packages https://github.com/openwrt/packages.git;${SDK_VER}
          src-git luci https://github.com/openwrt/luci.git;${SDK_VER}
          src-git routing https://git.openwrt.org/feed/routing.git;${SDK_VER}
          EOF
          
          # Add custom feeds if they exist
          if [ -d "$GITHUB_WORKSPACE/feeds/luci" ]; then
            echo "src-link luci_custom $GITHUB_WORKSPACE/feeds/luci" >> feeds.conf
          fi
          if [ -d "$GITHUB_WORKSPACE/feeds/packages" ]; then
            echo "src-link packages_custom $GITHUB_WORKSPACE/feeds/packages" >> feeds.conf
          fi
          
          echo "Feeds configuration:"
          cat feeds.conf
          echo "::endgroup::"
          
          echo "::group::🔄 Updating and Installing Feeds"
          if ! ./scripts/feeds update -a; then
            echo "❌ Failed to update feeds. Checking for error logs in custom feeds..."
            # Cari semua dump.txt error di logs/feeds/custom/packages
            find logs/feeds/custom/packages -name dump.txt 2>/dev/null | while read dump; do
              echo "--- Error log: $dump ---"
              cat "$dump"
              echo "--------------------------"
            done
            # Jangan langsung exit, lanjutkan install feeds
          fi
          if ! ./scripts/feeds install -a; then
            echo "❌ Failed to install feeds"
            exit 1
          fi
          
          # Install golang dependency if needed
          if [ -d "feeds/packages/lang/golang" ]; then
            echo "🔧 Updating golang to latest version"
            rm -rf feeds/packages/lang/golang
            git clone https://github.com/sbwml/packages_lang_golang -b 24.x feeds/packages/lang/golang || {
              echo "⚠️ Failed to clone golang, using default"
            }
          fi
          echo "::endgroup::"
          
          echo "::group::📝 Generating Build Configuration"
          cat > .config << EOF
          CONFIG_ALL_NONSHARED=n
          CONFIG_ALL_KMODS=n
          CONFIG_ALL=n
          CONFIG_AUTOREMOVE=n
          CONFIG_SIGNED_PACKAGES=n
          CONFIG_BUILDBOT=y
          CONFIG_DEVEL=y
          CONFIG_CCACHE=y
          EOF
          
          make defconfig || {
            echo "❌ Failed to generate default configuration"
            exit 1
          }
          echo "✅ Default configuration generated"
          echo "::endgroup::"

      - name: 📋 Determine Packages to Build
        id: determine_packages
        run: |
          cd ${{ env.SDK_CACHE_DIR }}/openwrt-sdk
          
          if [[ -n "${{ inputs.compile_pkg }}" ]]; then
            PACKAGES="${{ inputs.compile_pkg }}"
            echo "📦 Building specific packages: $PACKAGES"
          else
            PACKAGES=""
            # Cari custom packages di feeds/luci dan feeds/packages
            if [ -d "$GITHUB_WORKSPACE/feeds/luci" ]; then
              echo "🔍 Scanning custom luci feeds..."
              for makefile in $GITHUB_WORKSPACE/feeds/luci/*/Makefile; do
                [ -f "$makefile" ] || continue
                pkg_dir=$(dirname "$makefile")
                pkg_name=$(basename "$pkg_dir")
                if grep -q "PKG_NAME" "$makefile" 2>/dev/null; then
                  PACKAGES="$PACKAGES $pkg_name"
                fi
              done
            fi
            if [ -d "$GITHUB_WORKSPACE/feeds/packages" ]; then
              echo "🔍 Scanning custom packages feeds..."
              for makefile in $GITHUB_WORKSPACE/feeds/packages/*/Makefile; do
                [ -f "$makefile" ] || continue
                pkg_dir=$(dirname "$makefile")
                pkg_name=$(basename "$pkg_dir")
                if grep -q "PKG_NAME" "$makefile" 2>/dev/null; then
                  PACKAGES="$PACKAGES $pkg_name"
                fi
              done
            fi
            # Jika tidak ada custom packages, build all
            if [ -z "$PACKAGES" ]; then
              echo "📦 No custom packages found, will build available feed packages"
              PACKAGES="all"
            fi
          fi
          
          PACKAGES=$(echo "$PACKAGES" | xargs -n1 | sort -u | xargs)
          echo "📦 Final packages to build: $PACKAGES"
          echo "packages=$PACKAGES" >> $GITHUB_OUTPUT

      - name: 📦 Download Sources
        run: |
          cd ${{ env.SDK_CACHE_DIR }}/openwrt-sdk
          echo "::group::📥 Downloading package sources"
          
          # Download with retry logic
          if ! make download -j8; then
            echo "⚠️ Parallel download failed, trying sequential..."
            make download -j1 V=s || {
              echo "❌ Failed to download sources"
              exit 1
            }
          fi
          
          # Check for corrupted downloads
          find dl -size -1024c -exec ls -l {} \; | while read line; do
            echo "⚠️ Small file detected: $line"
          done
          echo "::endgroup::"

      - name: 🔨 Build Packages
        run: |
          cd ${{ env.SDK_CACHE_DIR }}/openwrt-sdk
          
          # Set verbosity
          V_FLAG=""
          if [ "${{ inputs.verbose }}" = "1" ]; then V_FLAG="V=s"; fi
          if [ "${{ inputs.verbose }}" = "2" ]; then V_FLAG="V=sc"; fi
          
          PACKAGES="${{ steps.determine_packages.outputs.packages }}"
          BUILD_SUCCESS=true
          FAILED_PACKAGES=""
          
          echo "::group::🔨 Building Packages"
          
          if [ "$PACKAGES" = "all" ]; then
            echo "📦 Building all available packages..."
            if ! make package/compile $V_FLAG -j$(nproc); then
              echo "⚠️ Some packages failed, trying with single thread..."
              make package/compile $V_FLAG -j1 || BUILD_SUCCESS=false
            fi
          else
            # Build specific packages
            for PKG in $PACKAGES; do
              echo "::group::📦 Building Package: $PKG"
              
              # Check if package exists in various feed locations
              PKG_FOUND=false
              for FEED_PATH in feeds/custom feeds/packages feeds/luci feeds/routing package; do
                if [ -d "$FEED_PATH/$PKG" ]; then
                  PKG_FOUND=true
                  echo "✅ Found package $PKG in $FEED_PATH"
                  
                  if ! make package/$PKG/compile $V_FLAG -j$(nproc); then
                    echo "⚠️ Failed with parallel build, trying single thread..."
                    if ! make package/$PKG/compile $V_FLAG -j1; then
                      echo "❌ Failed to build package: $PKG"
                      FAILED_PACKAGES="$FAILED_PACKAGES $PKG"
                      BUILD_SUCCESS=false
                    else
                      echo "✅ Successfully built package: $PKG"
                    fi
                  else
                    echo "✅ Successfully built package: $PKG"
                  fi
                  break
                fi
              done
              
              if [ "$PKG_FOUND" = "false" ]; then
                echo "⚠️ Package $PKG not found in any feed, skipping"
                FAILED_PACKAGES="$FAILED_PACKAGES $PKG"
              fi
              echo "::endgroup::"
            done
          fi
          
          echo "::endgroup::"
          
          if [ "$BUILD_SUCCESS" = "true" ]; then
            echo "::group::📋 Creating package index"
            make package/index $V_FLAG || echo "⚠️ Failed to create package index"
            echo "::endgroup::"
            echo "✅ All packages built successfully"
          else
            echo "::warning::Some packages failed to build: $FAILED_PACKAGES"
            # Don't exit with error - partial success is still useful
          fi

      - name: 🗂️ Collect Artifacts
        if: always()
        run: |
          echo "::group::🗂️ Preparing Artifacts"
          mkdir -p $GITHUB_WORKSPACE/artifacts/packages/${{ matrix.arch }}
          mkdir -p $GITHUB_WORKSPACE/artifacts/logs
          
          cd ${{ env.SDK_CACHE_DIR }}/openwrt-sdk
          
          echo "✨ Scanning for built packages..."
          PACKAGE_COUNT=0
          
          # Copy built packages
          if [ -d "bin/packages/${{ matrix.arch }}" ]; then
            find bin/packages/${{ matrix.arch }} -name "*.ipk" -o -name "*.apk" | while read pkg; do
              cp "$pkg" "$GITHUB_WORKSPACE/artifacts/packages/${{ matrix.arch }}/" 2>/dev/null || true
              PACKAGE_COUNT=$((PACKAGE_COUNT + 1))
            done
            echo "📦 Copied $PACKAGE_COUNT packages"
          fi
          
          # Copy package indexes
          find bin/packages/${{ matrix.arch }} -name "Packages*" -exec cp {} "$GITHUB_WORKSPACE/artifacts/packages/${{ matrix.arch }}/" \; 2>/dev/null || true
          
          # Copy build logs (limit size to avoid huge artifacts)
          find logs/ -type f -name "*.log" -size -10M -exec cp {} "$GITHUB_WORKSPACE/artifacts/logs/" \; 2>/dev/null || true
          
          echo "✨ Final artifacts structure:"
          ls -la "$GITHUB_WORKSPACE/artifacts/packages/${{ matrix.arch }}/" || echo "No packages found"
          
          # Create summary
          echo "## Build Summary" > "$GITHUB_WORKSPACE/artifacts/build-summary.md"
          echo "- **Release**: ${{ matrix.release }}" >> "$GITHUB_WORKSPACE/artifacts/build-summary.md"
          echo "- **Architecture**: ${{ matrix.arch }}" >> "$GITHUB_WORKSPACE/artifacts/build-summary.md"
          echo "- **Packages Built**: $(find "$GITHUB_WORKSPACE/artifacts/packages/${{ matrix.arch }}" -name "*.ipk" -o -name "*.apk" | wc -l)" >> "$GITHUB_WORKSPACE/artifacts/build-summary.md"
          echo "- **Build Time**: $(date -u)" >> "$GITHUB_WORKSPACE/artifacts/build-summary.md"
          
          echo "::endgroup::"

      - name: 📤 Upload Packages Artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: openwrt-packages-${{ matrix.release }}-${{ matrix.arch }}
          path: ${{ github.workspace }}/artifacts/packages/${{ matrix.arch }}
          retention-days: 30
          if-no-files-found: warn

      - name: 📤 Upload Build Summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-summary-${{ matrix.release }}-${{ matrix.arch }}
          path: ${{ github.workspace }}/artifacts/build-summary.md
          retention-days: 7

      - name: 📤 Upload Build Logs on Failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.release }}-${{ matrix.arch }}
          path: ${{ github.workspace }}/artifacts/logs/
          retention-days: 14

  push_packages:
    needs: build_ipk
    if: always() && !cancelled()
    name: 🚀 Push Packages to gh-pages
    permissions:
      contents: write
    runs-on: ubuntu-22.04
    steps:
      - name: 🚀 Checkout gh-pages Branch
        uses: actions/checkout@v4
        with:
          ref: 'gh-pages'
          fetch-depth: 1

      - name: 📥 Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          pattern: openwrt-packages-*
          merge-multiple: false

      - name: 📂 Organize Packages
        run: |
          echo "::group::📂 Organizing packages into release directories"
          
          TOTAL_PACKAGES=0
          
          for dir in ./artifacts/openwrt-packages-*; do
            if [ -d "$dir" ] && [ "$(ls -A "$dir" 2>/dev/null)" ]; then
              # Extract release and arch from directory name
              DIR_NAME=$(basename "$dir")
              RELEASE=$(echo "$DIR_NAME" | sed 's/openwrt-packages-//' | cut -d'-' -f1)
              ARCH=$(echo "$DIR_NAME" | sed 's/openwrt-packages-//' | cut -d'-' -f2-)
              
              if [[ "$RELEASE" == "SNAPSHOT" ]]; then
                TARGET_DIR="releases/snapshot/packages/$ARCH"
              else
                VERSION_MAJOR=$(echo "$RELEASE" | cut -d'.' -f1-2)
                TARGET_DIR="releases/$VERSION_MAJOR/packages/$ARCH"
              fi
              
              echo "📦 Processing packages from $dir to $TARGET_DIR"
              mkdir -p "$TARGET_DIR"
              
              # Count packages before moving
              PKG_COUNT=$(find "$dir" -name "*.ipk" -o -name "*.apk" | wc -l)
              echo "   Found $PKG_COUNT packages for $RELEASE-$ARCH"
              TOTAL_PACKAGES=$((TOTAL_PACKAGES + PKG_COUNT))
              
              # Move all files and maintain directory structure
              if [ "$(ls -A "$dir")" ]; then
                rsync -av "$dir/" "$TARGET_DIR/"
              fi
            else
              echo "⚠️ Empty or missing directory: $dir"
            fi
          done
          
          # Clean up artifact directories
          rm -rf ./artifacts
          
          echo "✅ Total packages processed: $TOTAL_PACKAGES"
          echo "::endgroup::"
          
          echo "::group::📋 Final repository structure"
          if [ -d "releases" ]; then
            echo "Repository structure:"
            find releases -type d | head -20
            echo ""
            echo "Sample packages:"
            find releases -name "*.ipk" -o -name "*.apk" | head -10
            echo ""
            echo "Total packages in repository: $(find releases -name "*.ipk" -o -name "*.apk" | wc -l)"
          else
            echo "⚠️ No releases directory found"
          fi
          echo "::endgroup::"

      - name: 💾 Commit and Push Changes
        run: |
          git config --local user.name "GitHub Action Bot"
          git config --local user.email "actions-user@users.noreply.github.com"
          
          # Add only the releases directory
          git add releases/ || true
          
          # Check if there are changes to commit
          if ! git diff --staged --quiet; then
            PACKAGE_COUNT=$(find releases -name "*.ipk" -o -name "*.apk" | wc -l 2>/dev/null || echo "0")
            COMMIT_MSG="🚀 Update Packages ($PACKAGE_COUNT total) - $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            
            if git commit -m "$COMMIT_MSG"; then
              # Push with retry logic
              for i in {1..3}; do
                if git push origin gh-pages; then
                  echo "✅ Successfully pushed package updates on attempt $i"
                  break
                else
                  if [ $i -eq 3 ]; then
                    echo "❌ Failed to push after 3 attempts"
                    exit 1
                  fi
                  echo "⚠️ Push attempt $i failed, retrying..."
                  sleep 5
                fi
              done
            else
              echo "❌ Failed to commit changes"
              exit 1
            fi
          else
            echo "✅ No new packages to commit"
          fi

  build_and_deploy_pages:
    needs: push_packages
    if: inputs.without_pages == false && (success() || failure())
    name: 🌐 Deploy to GitHub Pages
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-22.04
    steps:
      - name: 🚀 Checkout gh-pages Branch
        uses: actions/checkout@v4
        with:
          ref: 'gh-pages'
          submodules: true

      - name: 💎 Setup Ruby and Jekyll
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true

      - name: 📜 Run Pre-build Script
        env:
          SERVER_HOME: releases
        run: |
          if [ -f "./prenodes.sh" ]; then
            echo "🔧 Running prenodes.sh..."
            chmod +x ./prenodes.sh
            ./prenodes.sh
          else
            echo "ℹ️ prenodes.sh not found, skipping"
          fi

      - name: 🛠️ Configure GitHub Pages
        id: pages
        uses: actions/configure-pages@v5

      - name: 🏗️ Build with Jekyll
        run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production

      - name: 📤 Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3

      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4